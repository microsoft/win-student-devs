<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>30 Days of PWA</title>
  <atom:link href="https://aka.ms/learn-PWA/30Days-blog/feed.xml" rel="self" type="application/rss+xml" />
  <link>https://aka.ms/learn-PWA/30Days-blog</link>
  <description>For 30 days, we publish articles that aim to introduce developers to Progressive Web App. We have content that covers 0-level to 200-level topics. Each post takes 5-10 minutes to read and is followed by a sample snippet or exercise.</description>
   
  <item>
    <title><![CDATA[-]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/_sidebar</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/_sidebar</guid>
    <description><![CDATA[<ul>
<li><a href="/30DaysOfPWA/kickoff.md"><strong>0. Kickoff</strong></a></li>
<li><a href="/30DaysOfPWA/core-concepts/"><strong>1. Core Concepts</strong></a>
<ul>
<li><a href="/30DaysOfPWA/core-concepts/01.md">1.1 Introducing PWA</a></li>
<li><a href="/30DaysOfPWA/core-concepts/02.md">1.2 Deconstructing PWA</a></li>
<li><a href="/30DaysOfPWA/core-concepts/03.md">1.3 Make PWA installable</a></li>
<li><a href="/30DaysOfPWA/core-concepts/04.md">1.4 Make PWA reliable</a></li>
<li><a href="/30DaysOfPWA/core-concepts/05.md">1.5 Make PWA work offline</a></li>
<li><a href="/30DaysOfPWA/core-concepts/06.md">1.6 Make PWA capable</a></li>
<li><a href="/30DaysOfPWA/core-concepts/07.md">1.7 Developing PWA</a></li>
</ul></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/"><strong>2. Advanced Capabilities</strong></a>
<ul>
<li><a href="/30DaysOfPWA/advanced-capabilities/01.md">2.1 Introducting the advanced capabilities of Progressive Web Apps</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/02.md">2.2 Creating application shortcuts</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/03.md">2.3 Sharing content from and with your app</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/04.md">2.4 Displaying content more like an app</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/05.md">2.5 Caching your app data</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/06.md">2.6 Synchronizing app data in the background</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/07.md">2.7 Notifying your users of updates</a></li>
</ul></li>
<li><a href="/30DaysOfPWA/dev-tools/"><strong>3. Developer Tools</strong></a>
<ul>
<li><a href="/30DaysOfPWA/dev-tools/01.md">3.1 Get-started tools - Part 1</a></li>
<li><a href="/30DaysOfPWA/dev-tools/02.md">3.2 Get-started tools - Part 2</a></li>
<li><a href="/30DaysOfPWA/dev-tools/03.md">3.3 Debugging tools - Part 1</a></li>
<li><a href="/30DaysOfPWA/dev-tools/04.md">3.4 Debugging tools - Part 2</a></li>
<li><a href="/30DaysOfPWA/dev-tools/05.md">3.5 Auditing tools</a></li>
<li><a href="/30DaysOfPWA/dev-tools/06.md">3.6 Test automation tools</a></li>
<li><a href="/30DaysOfPWA/dev-tools/07.md">3.7 Packaging tools</a></li>
</ul></li>
<li><a href="/30DaysOfPWA/platforms-practices/"><strong>4. Platforms &amp; Practices</strong></a>
<ul>
<li><a href="/30DaysOfPWA/platforms-practices/01.md">4.1 Installability for PWAs</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/02.md">4.2 Best practices for PWA engagement</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/03.md">4.3 Distributing your PWA</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/04.md">4.4 Best practices for PWA reliability</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/05.md">4.5 PWA maintainability - Using web components</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/06.md">4.6 Best practices for PWA authentication</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/07.md">4.7 Best practices for PWA UI/UX</a></li>
</ul></li>
<li><h2 id="summary"><a href="/30DaysOfPWA/summary.md"><strong>5. Summary</strong></a></h2></li>
<li><a href="https://aka.ms/learn-pwa/30Days-ghd">💬 Join the discussion on Github</a></li>
<li><a href="https://aka.ms/learn-pwa/30Days-survey">🗣 Help us grow with your feedback</a></li>
</ul>]]></description>
    <pubDate>Mon, 14 Mar 2022 11:07:25 -0700</pubDate>
  </item>
   
  <item>
    <title><![CDATA[PWA DevTools]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/_navbar</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/_navbar</guid>
    <description><![CDATA[<ul>
<li>PWA DevTools
<ul>
<li><a href="https://pwabuilder.com">PWA Builder</a></li>
<li><a href="https://docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/">Microsoft Edge</a></li>
<li><a href="https://playwright.dev">Playwright</a></li>
<li><a href="https://webhint.io">webhint</a></li>
</ul></li>
</ul>]]></description>
    <pubDate>Mon, 14 Mar 2022 11:07:25 -0700</pubDate>
  </item>
   
  <item>
    <title><![CDATA[[GitHub license](https://img.shields.io/github/license/microsoft/Win-Student-Devs.svg)](https://github.com/microsoft/Win-Student-Devs/blob/master/LICENSE)]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/README</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/README</guid>
    <description><![CDATA[<p><a href="https://github.com/microsoft/Win-Student-Devs/blob/master/LICENSE"><img src="https://img.shields.io/github/license/microsoft/Win-Student-Devs.svg" alt="GitHub license" /></a> <a href="http://makeapullrequest.com"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome" /></a></p>
<p><a href="https://GitHub.com/microsoft/Win-Student-Devs/watchers/"><img src="https://img.shields.io/github/watchers/microsoft/Win-Student-Devs.svg?style=social&amp;label=Watch&amp;maxAge=2592000" alt="GitHub watchers" /></a> <a href="https://GitHub.com/microsoft/Win-Student-Devs/stargazers/"><img src="https://img.shields.io/github/stars/microsoft/Win-Student-Devs.svg?style=social&amp;label=Star&amp;maxAge=2592000" alt="GitHub stars" /></a></p>
<p><a href="https://open.vscode.dev/microsoft/Win-Student-Devs">Open in Visual Studio Code</a></p>
<h1 id="welcome">Welcome</h1>
<p><a href="https://github.com/microsoft/win-student-devs">This repo</a> aims to help student and early-in-career developers to build awesome apps that run on Windows. Explore some of our ongoing project pages here:</p>
<ul>
<li><a href="./30DaysOfPWA/">#30DaysOfPWA</a></li>
</ul>
<hr />
<h2 id="contributing">Contributing</h2>
<p>This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <a href="https://cla.opensource.microsoft.com">https://cla.opensource.microsoft.com</a>.</p>
<p>When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.</p>
<p>This project has adopted the <a href="https://opensource.microsoft.com/codeofconduct/">Microsoft Open Source Code of Conduct</a>. For more information see the <a href="https://opensource.microsoft.com/codeofconduct/faq/">Code of Conduct FAQ</a> or contact <a href="mailto:opencode@microsoft.com">opencode@microsoft.com</a> with any additional questions or comments.</p>
<h2 id="trademarks">Trademarks</h2>
<p>This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow <a href="https://www.microsoft.com/legal/intellectualproperty/trademarks/usage/general">Microsoft’s Trademark &amp; Brand Guidelines</a>. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party’s policies.</p>]]></description>
    <pubDate>Mon, 14 Mar 2022 11:07:25 -0700</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Day 30: Wrap-up]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/summary</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/summary</guid>
    <description><![CDATA[<h1 id="day-30-wrap-up">Day 30: Wrap-up</h1>
<p><strong>Author: Beth Pan | <span class="citation" data-cites="beth_panx">[@beth_panx]</span>(https://twitter.com/beth_panx)</strong></p>
<p>Welcome to day 30 of the <a href="https://aka.ms/learn-pwa/30Days-blog">30 Days of PWA</a> series. You made it! Let’s look back at our journey over the past month, review key concepts and learnings, and talk about next steps to continue your self-study.</p>
<h2 id="recap-resources">Recap &amp; Resources</h2>
<h3 id="week-1-core-concepts">Week 1: Core Concepts</h3>
<figure>
<img src="./core-concepts/_media/week-1.png" alt="Visual guide to core concepts week." /><figcaption>Visual guide to core concepts week.</figcaption>
</figure>
<p>We started our 30-day journey by learning <a href="./core-concepts/01.md">what is a Progressive Web App (PWA)</a>. Following the introduction, we talked about <a href="./core-concepts/02.md">fundamental building blocks of a PWA</a>: HTTPS, service workers, and web app manifest. We took a deeper dive into each block to learn how to make a PWA <a href="./core-concepts/03.md">installable</a>, <a href="./core-concepts/04.md">reliable</a>, <a href="./core-concepts/05.md">work offline</a>, and <a href="./core-concepts/06.md">capable</a>. Finally, we summarized this week’s learning by <a href="./core-concepts/07.md">taking an existing application and iteratively enhancing it for Progressive Web App functionality</a>.</p>
<p><strong>Resources:</strong></p>
<ul>
<li><a href="https://aka.ms/learn-PWA/30Days-1.1/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium">Overview of Progressive Web Apps (PWAs)</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-1.1/alistapart.com/article/understandingprogressiveenhancement">Understanding Progressive Enhancement</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-1.1/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/demo-pwas">Sample PWAs</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-1.1/devtoolstips.org">DevTools Tips</a> and <a href="https://aka.ms/learn-PWA/30Days-1.1/github.com/captainbrosset/devtools-tips">Source</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-1.2/developer.mozilla.org/en-US/docs/Glossary/https">HTTPS</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-1.2/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/service-workers">Service Workers</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-1.2/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/web-app-manifests">Web App Manifest</a></li>
</ul>
<h3 id="week-2-advanced-capabilities">Week 2: Advanced Capabilities</h3>
<figure>
<img src="./advanced-capabilities/_media/week2-roadmap.png" alt="Visual guide to advanced capabilities week." /><figcaption>Visual guide to advanced capabilities week.</figcaption>
</figure>
<p>Week 2 of #30DaysOfPWA is all about new exciting capabilities available to modern Progressive Web Apps. Many advanced features and APIs have been brought to the web platform over the last couple of years as part of the “Project Fugu” effort, enabling a whole new class of applications to be built on top of the web. In this week, we learn about <a href="./advanced-capabilities/01.md">PWA and Web Standards</a>, <a href="./advanced-capabilities/02.md">creating app shortcuts</a>, <a href="./advanced-capabilities/03.md">sharing content</a>, <a href="./advanced-capabilities/04.md">displaying content</a>, <a href="./advanced-capabilities/05.md">caching data</a>, <a href="./advanced-capabilities/06.md">background sync</a>, and <a href="./advanced-capabilities/07.md">notifications</a>.</p>
<p><strong>Resources:</strong></p>
<ul>
<li><a href="https://aka.ms/learn-PWA/30Days-2.1/fugu-tracker.web.app">Fugu API Tracker</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-2.2/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/shortcuts">Microsoft Edge Developer Docs: Define app shortcuts</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-2.3/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/share">Microsoft Edge Developer Docs: Share content with other apps</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-2.4/alistapart.com/article/breaking-out-of-the-box">Breaking Out of the Box</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-2.5/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/service-workers">Microsoft Edge Developer Docs: Use Service Workers to manage network requests and push notifications</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-2.6/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/background-syncs">Microsoft Edge Developer Docs: Synchronize and update a PWA in the background</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-2.7/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/notifications-badges">Microsoft Edge Developer Docs: Re-engage users with badges, notifications, and push messages</a></li>
</ul>
<h3 id="week-3-developer-tools">Week 3: Developer Tools</h3>
<figure>
<img src="./dev-tools/_media/week3-roadmap.png" alt="Visual guide to developer tools week." /><figcaption>Visual guide to developer tools week.</figcaption>
</figure>
<p>Now that we are familiar with Progressive Web Apps and available advanced capabilities, let’s look at the tools that help us <a href="./dev-tools/01.md">build</a>, <a href="./dev-tools/03.md">debug</a>, <a href="./dev-tools/05.md">audit</a>, <a href="./dev-tools/06.md">test</a>, and <a href="./dev-tools/07.md">package</a> PWAs in week 3.</p>
<p><strong>Resources:</strong></p>
<ul>
<li><a href="https://aka.ms/learn-PWA/30Days-3.1/github.com/pwa-builder/PWABuilder">PWABuilder Project</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.1/pwa-studio">PWA Studio</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.1/github.com/pwa-builder/pwa-starter">PWA Starter</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.2/www.pwabuilder.com">PWABuilder.com</a></li>
<li><a href="https://aka.ms/learn-PWA/device-emulation">Device Emulation tool</a></li>
<li><a href="https://aka.ms/learn-PWA/debug-PWA">Application tool to review Web App Manifest</a></li>
<li><a href="https://aka.ms/learn-PWA/sources-tool">Sources tool to debug JavaScript code</a></li>
<li><a href="https://aka.ms/learn-PWA/cache-storage">Cache Storage tool</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/microsoft-edge/devtools-guide-chromium/evaluate-performance">Evaluate runtime performance (Microsoft Edge performance tool)</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/microsoft-edge/devtools-guide-chromium/speed/get-started">Evaluate loading performance (Microsoft Edge performance tool)</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev">Playwright</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/microsoft-edge/playwright">Use Playwright to automate and test in Microsoft Edge</a></li>
</ul>
<h3 id="week-4-platforms-and-practices">Week 4: Platforms and Practices</h3>
<figure>
<img src="./platforms-practices/_media/week4-roadmap.png" alt="Visual guide to platforms and practices week." /><figcaption>Visual guide to platforms and practices week.</figcaption>
</figure>
<p>To close the series of #30DaysOfPWA, we present you with best practices of building great Progressive Web Apps. We answer the following questions to help you make design, development, and distribution decisions for your PWAs: <a href="./platforms-practices/01.md">What types of apps should be installable?</a> <a href="./platforms-practices/02.md">How do you set an engagement strategy?</a> <a href="./platforms-practices/03.md">How can you get maximum discoverability by distributing to app stores?</a> <a href="./platforms-practices/04.md">Which caching strategy should you choose to have the best user experience while offline?</a> <a href="./platforms-practices/05.md">Why use web components for PWA maintainability?</a> <a href="./platforms-practices/06.md">What about authentication?</a> And finally, <a href="./platforms-practices/07.md">what does it mean to have great UI/UX for your PWAs?</a></p>
<p><strong>Resources:</strong></p>
<ul>
<li><a href="https://aka.ms/learn-pwa/30days-4.5/fast.design/docs/introduction">FAST docs</a></li>
</ul>
<h2 id="share-your-feedback">Share your feedback</h2>
<p>This project is a labor of love. ❤️ It’s not the primary day job for many of our planners and contributors. A huge thank you to all for helping make this a reality. As we reflect on lessons learned, what went well, and what we can improve on for future projects, we especially appreciate your feedback. Please take a few minutes to <a href="https://aka.ms/learn-pwa/30Days-survey">share your feedback and suggestions</a> as they will help make future projects like this possible!</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>You have made it to the end of #30DaysOfPWA! Congratulations and a huge thank you for reading along. If you liked the series, give us a 🌟 on our <a href="https://github.com/microsoft/win-student-devs">GitHub repository</a>. Tag us on Twitter with #30DaysOfPWA because we would love to hear your learnings. That’s it! We wish to see you soon in the next learning journey.</p>]]></description>
    <pubDate>Sun, 13 Mar 2022 16:04:17 -0700</pubDate>
  </item>
   
  <item>
    <title><![CDATA[4.7: Best Practices for PWA UI/UX]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/07</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/07</guid>
    <description><![CDATA[<h1 id="best-practices-for-pwa-uiux">4.7: Best Practices for PWA UI/UX</h1>
<figure>
<img src="_media/day7.png" alt="Image of title and author" /><figcaption>Image of title and author</figcaption>
</figure>
<p>Welcome to day 29 of the <a href="https://aka.ms/learn-pwa/30Days-blog">30 Days of PWA</a> series! Today’s blog post will walk through some of the best practices to keep in mind when thinking about your PWA’s user experience and interface.</p>
<h2 id="responsive-considerations">Responsive considerations</h2>
<p>When designing your PWA there are a few things to think about beyond just ensuring the user interface adapts to whatever device someone is on, whether that’s on mobile, a tablet or a desktop. In a previous article we looked at <a href="../advanced-capabilities/04.md">display modes</a> and how you can make your PWA feel more like an app. These display modes are important to consider when you’re thinking about the responsiveness of your PWA.</p>
<p>When a user is on mobile or a tablet, how much of the browser UI do you want to be shown, if any? Does your decision affect the UI of the PWA? For example, if you want your PWA to be displayed in fullscreen mode, ensure there’s a way to navigate back from the current page because there’s no browser back button provided in this mode.</p>
<p>How do you want your desktop version to display if it’s in standalone mode outside of the browser? Do you want it to feel as native as possible? Consider implementing <a href="../advanced-capabilities/04.md">Window Controls Overlay</a> to customize the title bar of your PWA.</p>
<p>Regardless of the display mode you choose, consider what each one means for the way your PWA displays on mobile, tablet and desktop an assess what implications that has for your UI.</p>
<h2 id="keep-content-focused-and-up-to-date">Keep content focused and up to date</h2>
<p>Progressive web apps are inherently about delivering experiences in more performant ways and that experience isn’t just about technical performance but about how quickly users can find what they need. The Starbucks PWA is a great example of focused experience that has been optimized for mobile ordering. The main menu gives us three main options: “Menu”, “Rewards” and “Gift Cards”.</p>
<figure>
<img src="_media/starbucks-app.jpg" alt="The Starbucks PWA home screen and menu" /><figcaption>The Starbucks PWA home screen and menu</figcaption>
</figure>
<p>The rest of the site content is deprioritized and placed at the bottom. It’s still accessible but out of the way of the main task users are coming to the site for: to order coffee.</p>
<p>Identify what key tasks and content your users are coming to your app for and optimize for those scenarios to streamline their task. Focus on reducing any clutter in the UI particularly with mobile versions due to the reduced screen size. For example, the Twitter app on desktop has two sidebars. On the mobile version, the navigation moves to the bottom and the “What’s Happening” sidebar becomes integrated into the search tab with the main focus of the app being the timeline.</p>
<figure>
<img src="_media/twitter-app.jpg" alt="The What’s Happening content on Twitter appears when you’re in the Search pane on mobile" /><figcaption>The What’s Happening content on Twitter appears when you’re in the Search pane on mobile</figcaption>
</figure>
<p>Additionally consider how to prompt your users to install the latest version of your PWA when there’s been a change, especially if it’s going to affect what they’re seeing in the app. Make it stand out from the rest of the UI so that users notice the call to update immediately so that they can start their journey in your app with the most recent version and no interruption to update in the middle of using it.</p>
<h2 id="keep-users-engaged-in-offline-mode">Keep users engaged in offline mode</h2>
<p>The great thing about PWAs is their ability to retain some functionality (or all depending on the PWA’s features) when they’re <a href="../core-concepts/05.md">offline</a> without an internet connection. Depending on some of the feature functionality though, key parts of your PWA may not work offline so you need to think about what your users are going to see when that page goes offline.</p>
<p>Having a typical “page offline” or “no connection” message won’t keep your users engaged and in the app, and it doesn’t take advantage of the offline capabilities of PWAs. Think about what the experience will be offline. What content can still be served and interacted with when offline, and if there isn’t core content that can be, what can you put in its place that isn’t an error message?</p>
<p>If you’re curious about some offline strategies, check out the <a href="04.md">post on reliability</a> from earlier this week.</p>
<h2 id="make-interactions-feel-seamless">Make interactions feel seamless</h2>
<p>Performance and speed are critical when thinking about the user experience of any website. If you’re on a website and click something and the navigation takes you to a screen that is loading slowly, it can be frustrating especially without any indication the page is loading. Provide transition states such as showing <a href="https://aka.ms/learn-pwa/30days-4.7/docs.microsoft.com/fluent-ui/web-components/components/skeleton">skeleton UI</a> when content is loading. This provides a preview of the UI while it waits for the actual UI to load. It also indicates that something is happening and provides a better experience than just a loader or progress bar. The switch from skeleton UI to actual UI is smoother and sets your users up for what to expect on the page.</p>
<p>Seamlessness and perceived performance aren’t just about the UI of your PWA though, certain tasks that users need to complete can be sped up with certain features. For example, in a checkout task flow, make things like autofill and web payments available so that users can quickly fill out details. This reduces friction and gets them to the end of their task more quickly. Experiences like this leave a good impression and will bring users back to your PWA.</p>
<h2 id="keep-design-native-like">Keep design native-like</h2>
<p>Finally, your PWA experience should feel like a native app so implementing features like Window Controls Overlay can help deliver that experience. You can also use things like Fluent components for Windows based PWAs. Keeping the experience native-like ensures that users have a familiar experience to what they’d expect on a specific platform.</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://aka.ms/learn-pwa/30days-4.7/microsoft.com/design/fluent">Fluent design</a></li>
<li><a href="../advanced-capabilities/04.md">Making PWA Feel Like an App</a></li>
</ul>]]></description>
    <pubDate>Sat, 12 Mar 2022 16:04:07 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[4.6: Best Practices for PWA Authentication]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/06</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/06</guid>
    <description><![CDATA[<h1 id="best-practices-for-pwa-authentication">4.6: Best Practices for PWA Authentication</h1>
<p><strong>Author: Nikola Metulev <span class="citation" data-cites="nmetulev">[@nmetulev]</span>(https://twitter.com/nmetulev)</strong></p>
<p>Welcome to Week 4, Day 6 of the <a href="https://aka.ms/learn-pwa/30Days-blog">30 Days of PWA</a> series! Now that we’ve seen how to start building PWAs and what basic and advanced capabilities they bring, it’s time to dive into what a <em>good</em> PWA really looks like it, and how we can start to build quality applications ourselves. Week 4 is all about some of the best practices and technologies you can use to really polish up your PWA.</p>
<figure>
<img src="_media/day6.png" alt="Image of Title and Author" /><figcaption>Image of Title and Author</figcaption>
</figure>
<p>Sooner or later, your app scenarios will require your users to be authenticated, whether it is to access and modify data, to roam data across devices, to build personalized or shared experiences, or many (many) more reasons that have a dependency on the ability for your users to sign in. In this article, we’ll cover considerations that you will go through when deciding how to authenticate users and what are some of the best practices and available APIs that can help keep your users secure when authenticating.</p>
<h2 id="authenticating-users">Authenticating users</h2>
<p>Verifying someone’s identity through a password is one of the oldest authentication methods used heavily across the web. A majority of sites today require users to create and remember passwords and many users are very familiar with the concept. For developers, passwords might seem like the easiest choice when adding authentication.</p>
<figure>
<img src="_media/day6-password.png" alt="Username and password form." /><figcaption>Username and password form.</figcaption>
</figure>
<p>However, implementing an authentication experience that provides good security and good user experience with a traditional username and password approach is easier said than done. Passwords are often weak, forgotten, stolen, and very frequently reused. There are a ton of best practices that you could apply to avoid many of the common issues with passwords, such as only storing password hashes, properly encrypting network traffic, implementing strict password requirements, and more. However, even if you do everything right, you can not avoid the human in the process and it only takes a leaked reused password to cause a problem.</p>
<p>There are really two main approaches to providing a secure and simple sign in experience for your users. The simplest is to integrate federated login with an identity provider your users will trust. The other approach is to implement multi-factor and/or passwordless authentication. Let’s look at how you could get started with both options.</p>
<h2 id="federated-authentication">Federated authentication</h2>
<p>Using an existing identity provider like Microsoft, Google, Facebook and others, can improve security and help avoid many of the issues with implementing your own username and password based authentication. Users will only need to remember a single password, and federated identity providers have systems in place to mitigate bad actors, enable single sign on, and add additional ways to verify users identity.</p>
<figure>
<img src="_media/day6-federated.png" alt="Federated login form" /><figcaption>Federated login form</figcaption>
</figure>
<p>Federated login is probably the easiest and fastest approach to get to a signed in user without requiring much work from you as the developer, while also keeping your users secure.</p>
<p>While this model isn’t perfect, it grants some quick wins:</p>
<ul>
<li>Users don’t have to remember new passwords and don’t have to create new accounts.</li>
<li>Users are encouraged towards multi-factor authentication. (In fact, some work accounts require it.)</li>
<li>The sign-in providers tend to have more security around suspicious activity, e.g. signing in from an unknown location, invalid password cooldowns, etc.</li>
<li>You don’t have to maintain usernames or passwords</li>
</ul>
<h3 id="adding-federated-login-to-your-pwa">Adding Federated login to your PWA</h3>
<p>The process to integrate with the various identity providers differs slightly, but the concept is usually the same. Most use <a href="https://aka.ms/learn-pwa/30days-4.6/oauth.net/2">OAuth2</a> to authenticate users and ask for consent for your application to sign them in and access their data. You are then given a token that your app can use to identify the users and access their information. Let’s look at two examples of how you can quickly do this in your app.</p>
<h4 id="pwa-auth"><code>&lt;pwa-auth&gt;</code></h4>
<p>In most cases, to implement federated authentication in your app, you will use an authentication library. One of the easiest and quickest way to integrate with multiple identity providers at once is to use the <code>&lt;pwa-auth&gt;</code> web component. It builds on top of the identity providers’ auth libraries and lazy loads them when they are needed, while providing a consistent interface across all providers.</p>
<p>First things first - to authenticate users with any identity provider, you will need to register you app with said provider. The process is usually straightforward, and the output is an app-id/client-id you can use with their library or <code>&lt;pwa-auth&gt;</code>. You can learn more about how to register to each of the providers supported by <code>&lt;pwa-auth&gt;</code> <a href="https://aka.ms/learn-pwa/30days-4.6/github.com/pwa-builder/pwa-auth">here</a>.</p>
<p>Once you have the app ids you want to use, you are ready to authenticate users. Let’s import the component and use it in our app.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;module&quot;</span><span class="ot"> src=</span><span class="st">&quot;https://cdn.jsdelivr.net/npm/@pwabuilder/pwaauth/dist/pwa-auth.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="co">&lt;!-- To create a key, see https://github.com/pwa-builder/pwa-auth#creating-keys --&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="kw">&lt;pwa-auth</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="ot">   microsoftkey=</span><span class="st">&quot;...&quot;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="ot">   googlekey=</span><span class="st">&quot;...&quot;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="ot">   facebookkey=</span><span class="st">&quot;...&quot;</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">&lt;/pwa-auth&gt;</span></a></code></pre></div>
<p>Run your app and notice that now you have a beautiful new <em>Sign In</em> button to sign in with your chosen provider</p>
<figure>
<img src="_media/day6-pwa-auth.gif" alt="pwa-auth in action" /><figcaption>pwa-auth in action</figcaption>
</figure>
<p>Once your user is signed in, you will have access to the JWT token to use to either identify the user on the front end, or make API calls to your backend. Let’s get the signed in user info:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode js"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">const</span> pwaAuth <span class="op">=</span> <span class="va">document</span>.<span class="at">querySelector</span>(<span class="st">&quot;pwa-auth&quot;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="va">pwaAuth</span>.<span class="at">addEventListener</span>(<span class="st">&quot;signin-completed&quot;</span><span class="op">,</span> ev <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="kw">const</span> signIn <span class="op">=</span> <span class="va">ev</span>.<span class="at">detail</span><span class="op">;</span></a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="cf">if</span> (<span class="va">signIn</span>.<span class="at">error</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb2-5" title="5">        <span class="va">console</span>.<span class="at">error</span>(<span class="st">&quot;Sign in failed&quot;</span><span class="op">,</span> <span class="va">signIn</span>.<span class="at">error</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-6" title="6">    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-7" title="7">        <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Email: &quot;</span><span class="op">,</span> <span class="va">signIn</span>.<span class="at">email</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-8" title="8">        <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Name: &quot;</span><span class="op">,</span> <span class="va">signIn</span>.<span class="at">name</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-9" title="9">        <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Picture: &quot;</span><span class="op">,</span> <span class="va">signIn</span>.<span class="at">imageUrl</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-10" title="10">        <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Provider (MS, Google, FB): &quot;</span><span class="op">,</span> <span class="va">signIn</span>.<span class="at">provider</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-11" title="11">        <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Raw data from provider: &quot;</span><span class="op">,</span> <span class="va">signIn</span>.<span class="at">providerData</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-12" title="12">    <span class="op">}</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>Check this out in action <a href="https://aka.ms/learn-pwa/30days-4.6/pwa-auth-basic.glitch.me">here</a>.</p>
<h4 id="managed-identity-through-your-hosting-service">Managed identity through your hosting service</h4>
<p>Alternatively, if your app is hosted on one of the many popular serverless deployment platforms such as Azure Static Web Apps, Vercel, and Netlify, you may be able to leverage their managed identity solution for easily authenticating users on the client and at the API layer.</p>
<p>As an example, Azure Static Web Apps exposes several built in providers for signing in with Microsoft, Twitter, Github and more while giving you access to the user details information through a very simple API (without needing to register an app with a provider or use any additional libraries).</p>
<p>For an example, to login a user to GitHub, you simply redirect your users to</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;/.auth/login/github&quot;</span><span class="kw">&gt;</span>Login<span class="kw">&lt;/a&gt;</span></a></code></pre></div>
<p>Once they’ve signed in, they will be redirected back to your app and you can use a simple api call to get the signed in information</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode js"><code class="sourceCode javascript"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">async</span> <span class="kw">function</span> <span class="at">getUserInfo</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb4-2" title="2">  <span class="kw">const</span> response <span class="op">=</span> <span class="cf">await</span> <span class="at">fetch</span>(<span class="st">&#39;/.auth/me&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-3" title="3">  <span class="kw">const</span> payload <span class="op">=</span> <span class="cf">await</span> <span class="va">response</span>.<span class="at">json</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb4-4" title="4">  <span class="kw">const</span> <span class="op">{</span> clientPrincipal <span class="op">}</span> <span class="op">=</span> payload<span class="op">;</span></a>
<a class="sourceLine" id="cb4-5" title="5">  <span class="cf">return</span> clientPrincipal<span class="op">;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="op">}</span></a></code></pre></div>
<p>Even better, any Azure API functions part of your app will also have access to the same information.</p>
<p>If you are using any of the more popular hosting services out there, I encourage you to check what options they offer for authenticating users - it might end up the easiest way to get started. 😊 ### Credential Management and Web Authentication APIs</p>
<p>Finally, as you go through the journey of authenticating users in your apps, whether you are using your own password based authentication or federated authentication, there are built in APIs that can help simplify authentication for your users by allowing you to implement passwordless authentication, two-factor authentication, and or biometric authentication.</p>
<p>The <a href="https://aka.ms/learn-pwa/30days-4.6/developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API">Credential Management API</a> allows you to interact with the browser’s built in password system. Through this APIs, you can store and retrieve different types of credentials, both traditional (password based) and federated credentials. This gives users capabilities such as seeing the federated account they used to sign on to a site, or resuming a session without the explicit sign-in flow of an expired session. (fun fact - the <code>&lt;pwa-auth&gt;</code> web component leverages these APIs out of the box to make the sign in experience for your user as straightforward as possible).</p>
<p>The <a href="https://aka.ms/learn-pwa/30days-4.6/developer.mozilla.org/docs/Web/API/Web_Authentication_API">Web Authentication API</a> (also known as WebAuthn) on the other hand enables strong authentication with public key cryptography instead of a password. It’s a powerful API that enables passwordless authentication and it even integrate directly with your devices biometric based authentication like Windows Hello and Apple’s Touch ID.</p>
<figure>
<img src="_media/day6-webauthn.gif" alt="Biometric authentication with the Web Authentication APIs" /><figcaption>Biometric authentication with the Web Authentication APIs</figcaption>
</figure>
<p>It generates a private/public keypair that is used instead of a password for that website. The private key is stored securely on the user’s device and the public key is shared with the server that can later use to authenticate the user and verify their identity.</p>
<p>Both of these sets of APIs can alleviate a lot of the pain points developers and users face when authenticating users. You might not use these APIs when you are just getting started, but you should be aware of their existence and leverage them in your apps whenever possible.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>I hope this article gave you an idea of some of the considerations when it comes to authenticating users in your apps. This is just the tip of the iceberg, but hopefully this and the resources below give you a place to get started. Happy Coding!</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://aka.ms/learn-pwa/30days-4.6/github.com/pwa-builder/pwa-auth">Authenticating users with <code>&lt;pwa-auth&gt;</code></a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.6/docs.microsoft.com/azure/static-web-apps/authentication-authorization">Authentication and authorization for Azure Static Web Apps</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.6/developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API">Credential Management API</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.6/developer.mozilla.org/docs/Web/API/Web_Authentication_API">Web Authentication API</a></li>
</ul>]]></description>
    <pubDate>Fri, 11 Mar 2022 16:00:50 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[4.5: PWA Maintainability: Using Web Components]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/05</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/05</guid>
    <description><![CDATA[<h1 id="pwa-maintainability-using-web-components">4.5: PWA Maintainability: Using Web Components</h1>
<p><strong>Author: Zach Teutsch <span class="citation" data-cites="devteutsch">[@devteutsch]</span>(https://twitter.com/devteutsch)</strong></p>
<p>Welcome to Week 4, Day 5 of the <a href="https://aka.ms/learn-pwa/30Days-blog">30 Days of PWA</a> series! Now that we’ve seen how to start building PWAs and what basic and advanced capabilities they bring, it’s time to dive into what a <em>good</em> PWA really looks like it, and how we can start to build quality applications ourselves. Week 4 is all about some of the best practices and technologies you can use to really polish up your PWA.</p>
<figure>
<img src="_media/day5.png" alt="image of title and author." /><figcaption>image of title and author.</figcaption>
</figure>
<h2 id="where-do-we-start-with-maintainability">Where Do We Start With Maintainability?</h2>
<p>Keeping our PWA maintainable, or any application for that matter, can be a serious undertaking with tons of unique challenges. The web capabilities that make PWAs possible allow for more capable and complicated web experiences, but it comes with a price. How do we keep our increasingly complex PWA projects clean and extensible?</p>
<p>Out of the many options available to us, today we’ll be looking at one technology we can leverage in our projects: <strong>web components!</strong></p>
<h2 id="web-components">Web Components?</h2>
<p>Web components are set of web technologies that allow you to create custom standalone components (like your very own <code>&lt;custom-button&gt;</code>, for example) that work anywhere on the web. They come with a whole suite of development advantages, including project maintainability. Check out this <a href="https://aka.ms/learn-pwa/30days-4.5/fast.design/docs/resources/why-web-components">“Why Web Components?”</a> article for a quick primer on what Web Components bring to the table.</p>
<p>Now, let’s take a look at how web components can improve our PWAs and make our projects more maintainable.</p>
<h2 id="encapsulation-with-shadow-dom">Encapsulation with Shadow DOM</h2>
<p>When we create a web component, all of our behavior, html, and styling is contained to that component. We don’t have to worry about it interfering with other aspects of our project when we include our component in our application. This a huge bonus for maintainability: it allows us to segment our code and avoid overly-verbose spaghetti code in our project files. Additionally, for larger PWAs that may have multiple developers working at once, web components allow for concurrent contribution by keeping unrelated components separated from each other.</p>
<p>Web components make this possible using <a href="https://aka.ms/learn-pwa/30days-4.5/developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM"><strong>Shadow DOM</strong></a>, which allows our component to live in a “hidden” portion of our larger DOM tree. We can prevent clashing with the rest of our DOM by isolating the portion related to the web component.</p>
<h2 id="web-standard">Web Standard</h2>
<p>Web Components are a <strong>Web Standard</strong>, which means they are considered a fundamental model for component behavior on the Web. This means we can rely on the web components we build to work just about everywhere:</p>
<figure>
<img src="_media/component-web-standards.png" alt="Compatibility list for web components" /><figcaption>Compatibility list for web components</figcaption>
</figure>
<p>Another benefit to this is that web component frameworks are generally small and fully interoperable. This means that you can use web components within larger modern frameworks (like React or Angular) and they will still work as expected. You can even ditch the frameworks all together and build web components in vanilla javascript.</p>
<p>As far as maintainability goes for our PWAs, this is great. We know our components will work in different browsers and frameworks, and we don’t have to write extra code to keep our project functional. When we go to update or extend one of our components, we can work freely without worrying about compatibility issues. Web Standards also generally guarantee forward-compatibility: our components will still work as the open web grows and changes.</p>
<h2 id="building-web-components-with-fast">Building Web Components with FAST</h2>
<p>There are lots of framework options for building web components, but today we’ll be using <a href="https://aka.ms/learn-pwa/30days-4.5/fast.design/docs/introduction">the FAST framework</a> to see a beginner example.</p>
<p>Let’s say we are building a naive <code>&lt;movie-review&gt;</code> element that will live in an <code>MovieReview.ts</code> file.</p>
<p>First, we can start with an element with a few attributes:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode typescript"><code class="sourceCode typescript"><a class="sourceLine" id="cb1-1" title="1"><span class="im">import</span> <span class="op">{</span> FASTElement<span class="op">,</span> customElement<span class="op">,</span> attr <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;@microsoft/fast-element&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3">@<span class="fu">customElement</span>(<span class="st">&#39;movie-review&#39;</span>)</a>
<a class="sourceLine" id="cb1-4" title="4"><span class="im">export</span> <span class="kw">class</span> MovieReview <span class="kw">extends</span> FASTElement <span class="op">{</span></a>
<a class="sourceLine" id="cb1-5" title="5">    @attr movieName<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;No Movie Listed&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb1-6" title="6">    @attr rating<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;0&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="op">}</span></a></code></pre></div>
<p>Next, we can provide an HTML template so we can display our attributes:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode typescript"><code class="sourceCode typescript"><a class="sourceLine" id="cb2-1" title="1"><span class="im">import</span> <span class="op">{</span> FASTElement<span class="op">,</span> customElement<span class="op">,</span> attr<span class="op">,</span> html <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;@microsoft/fast-element&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="co">// our html template for our component</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="kw">const</span> template <span class="op">=</span> html<span class="op">&lt;</span>MovieReview<span class="op">&gt;</span><span class="vs">`</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="vs">    &lt;div class=&quot;reviewDiv&quot;&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="vs">        &lt;div class=&quot;nameDiv&quot;&gt;</span><span class="sc">${</span>x <span class="kw">=&gt;</span> <span class="va">x</span><span class="op">.</span><span class="at">movieName</span><span class="sc">}</span><span class="vs">&lt;/div&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="vs">        &lt;div class=&quot;ratingDiv&quot;&gt;</span><span class="sc">${</span>x<span class="kw">=&gt;</span> <span class="va">x</span><span class="op">.</span><span class="at">rating</span><span class="sc">}</span><span class="vs"> stars!&lt;div&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="vs">    &lt;/div&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="vs">`</span></a>
<a class="sourceLine" id="cb2-10" title="10"></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="co">// that we can pass into our customElement</span></a>
<a class="sourceLine" id="cb2-12" title="12">@<span class="fu">customElement</span>(<span class="op">{</span></a>
<a class="sourceLine" id="cb2-13" title="13">    name<span class="op">:</span> <span class="st">&#39;movie-review&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb2-14" title="14">    template</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="im">export</span> <span class="kw">class</span> MovieReview <span class="kw">extends</span> FASTElement <span class="op">{</span></a>
<a class="sourceLine" id="cb2-17" title="17">    @attr movieName<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;No Movie Listed&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb2-18" title="18">    @attr rating<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;0&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb2-19" title="19"><span class="op">}</span></a></code></pre></div>
<p>We could then use our element like so:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">&lt;movie-review</span><span class="ot"> moviename=</span><span class="st">&quot;Fast and Furious: Tokyo Drift&quot;</span><span class="ot"> rating=</span><span class="st">&quot;5&quot;</span><span class="kw">&gt;</span></a></code></pre></div>
<p>This is just going to give us some boring black text. Let’s see how we can add styling:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode typescript"><code class="sourceCode typescript"><a class="sourceLine" id="cb4-1" title="1"><span class="im">import</span> <span class="op">{</span> FASTElement<span class="op">,</span> customElement<span class="op">,</span> attr<span class="op">,</span> html<span class="op">,</span> css <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;@microsoft/fast-element&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="kw">const</span> styles <span class="op">=</span> css<span class="vs">`</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="vs">    .reviewDiv {</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="vs">        border: 1px solid black;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="vs">        display: inline-block;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="vs">        padding: 10px;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="vs">    }</span></a>
<a class="sourceLine" id="cb4-9" title="9"></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="vs">    .nameDiv { </span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="vs">        font-size: 24; </span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="vs">        font-weight: bold;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="vs">        font-style: italic;</span></a>
<a class="sourceLine" id="cb4-14" title="14"><span class="vs">    }</span></a>
<a class="sourceLine" id="cb4-15" title="15"></a>
<a class="sourceLine" id="cb4-16" title="16"><span class="vs">    .ratingDiv { </span></a>
<a class="sourceLine" id="cb4-17" title="17"><span class="vs">        color: blue; </span></a>
<a class="sourceLine" id="cb4-18" title="18"><span class="vs">    }</span></a>
<a class="sourceLine" id="cb4-19" title="19"><span class="vs">`</span></a></code></pre></div>
<p>And we can pass those styles in just like our template:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode typescript"><code class="sourceCode typescript"><a class="sourceLine" id="cb5-1" title="1">@<span class="fu">customElement</span>(<span class="op">{</span></a>
<a class="sourceLine" id="cb5-2" title="2">    name<span class="op">:</span> <span class="st">&#39;movie-review&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-3" title="3">    template<span class="op">,</span></a>
<a class="sourceLine" id="cb5-4" title="4">    styles</a>
<a class="sourceLine" id="cb5-5" title="5"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb5-6" title="6"><span class="im">export</span> <span class="kw">class</span> MovieReview <span class="kw">extends</span> FASTElement <span class="op">{</span></a>
<a class="sourceLine" id="cb5-7" title="7">    @attr movieName<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;No Movie Listed&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb5-8" title="8">    @attr rating<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;0&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="op">}</span></a></code></pre></div>
<p>Our <em>beautiful</em> component would then look something like this:</p>
<figure>
<img src="_media/movie-review.png" alt="Image of our movie review web component" /><figcaption>Image of our movie review web component</figcaption>
</figure>
<p>We now have a reusable <code>&lt;movie-review&gt;</code> component. As you can see, this example is fairly naive, but you can start to imagine the possibilities. Let’s say we had a more in-depth <code>&lt;movie-review&gt;</code> component that we could use inside a related <code>&lt;movie-review-list&gt;</code> component. We could then change the appearance and functionality of our movie reviews separate from the list that displays them, allowing us extend and update our <code>&lt;movie-review&gt;</code> component regardless of the environment it lives in. Encapsulated and maintainable!</p>
<p>If you want more depth on building quality components and adding functionality, or if you want to leverage the dozens of pre-built components FAST offers, check out the <a href="https://aka.ms/learn-pwa/30days-4.5/fast.design/docs/introduction">FAST documentation</a>.</p>
<p>FAST isn’t the only way to build web components: check out this <a href="https://aka.ms/learn-pwa/30days-4.5/webcomponents.dev/blog/all-the-ways-to-make-a-web-component">blog post</a> for a comprehensive list of options.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Today, we learned how we can write maintainable web code and power up our PWAs with web components. We just barely scratched the surface of web components and the FAST framework, and there’s a ton more to dive into if you want to really make use of web components in our PWAs. Check out the resources for more learning!</p>
<h2 id="resources">Resources</h2>
<ul>
<li><strong><a href="https://aka.ms/learn-pwa/30days-4.5/fast.design/docs/introduction">FAST documentation</a></strong></li>
<li><strong><a href="https://aka.ms/learn-pwa/30days-4.5/developer.mozilla.org/docs/Web/Web_Components">MDN documentation on Web Components</a></strong></li>
<li><strong><a href="https://aka.ms/learn-pwa/30days-4.5/medium.com/pwabuilder/building-pwas-with-web-components-33f986bf8e4c">Building PWAs with Web Components</a></strong> article by Justin Willis</li>
</ul>]]></description>
    <pubDate>Thu, 10 Mar 2022 16:12:41 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[4.4: Best Practices for PWA Reliability]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/04</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/04</guid>
    <description><![CDATA[<h1 id="best-practices-for-pwa-reliability">4.4: Best Practices for PWA Reliability</h1>
<p><strong>Author: Zach Teutsch <span class="citation" data-cites="devteutsch">[@devteutsch]</span>(https://twitter.com/devteutsch)</strong></p>
<p>Welcome to Week 4, Day 4 of the <a href="https://aka.ms/learn-pwa/30Days-blog">30 Days of PWA</a> series! Now that we’ve seen how to start building PWAs and what basic and advanced capabilities they bring, it’s time to dive into what a <em>good</em> PWA really looks like it, and how we can start to build quality applications ourselves. Week 4 is all about some of the best practices and technologies you can use to really polish up your PWA.</p>
<figure>
<img src="_media/day4.png" alt="Placeholder Banner Only. Replace when final assets ready." /><figcaption>Placeholder Banner Only. Replace when final assets ready.</figcaption>
</figure>
<h3 id="a-quick-note">A Quick Note</h3>
<p>This article is about the best practices for reliability with PWAs. If you’re looking for the basics on offline behavior and caching in PWAs, check out the <a href="../core-concepts/05.md">Make PWA Work Offline</a> article from Week 1.</p>
<h2 id="what-does-reliability-look-like-for-pwa">What Does Reliability Look Like For PWA?</h2>
<p>In general, reliability refers to whether or not your application can maintain a consistent user experience under different circumstances. Some of the issues that can follow under the umbrella of reliability: * How fast your application loads on varying connection strengths * How your application works in offline conditions * How your application and services work as they scale up and increase in usage * How your application runs on older and less powerful devices</p>
<p>For PWA, reliability issues related to your user’s internet connection are particularly of interest, as more traditional web experiences were heavily dependent on the availability of a connection.</p>
<p>Today, we’re going to build on what we saw about caching in Week 1 to see how we can take advantage of PWA capabilities to make our apps work well regardless of the strength or availability of the user’s internet connection.</p>
<h2 id="speeding-up-your-pwa-with-caching-strategies">Speeding Up Your PWA With Caching Strategies</h2>
<p>One of the ways you can speed up your PWA and increase reliability is by minimizing requests to the network and making use of cached responses whenever possible. There are many caching strategies that you can take advantage of, but today we’re just going to take a look at two popular options: <code>cache-first</code> and <code>stale-while-revalidate</code>.</p>
<h2 id="cache-first">Cache-First</h2>
<p>In the <a href="../core-concepts/05.md">Make PWA Work Offline</a> article from Week 1, we saw a little bit about how a cache-first works. A cache-first strategy is exactly what it sounds like: on a <code>fetch</code> event, our service worker will check the cache for the response first, and go to the network <em>only</em> if the cache fails.</p>
<p>We saw this service worker snippet:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb1-1" title="1"><span class="va">self</span>.<span class="at">addEventListener</span>(<span class="st">&#39;fetch&#39;</span><span class="op">,</span> event <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="va">event</span>.<span class="at">respondWith</span>((<span class="kw">async</span> () <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb1-3" title="3">        <span class="kw">const</span> cache <span class="op">=</span> <span class="cf">await</span> <span class="va">caches</span>.<span class="at">open</span>(CACHE_NAME)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5">        <span class="co">// Try the cache first.</span></a>
<a class="sourceLine" id="cb1-6" title="6">        <span class="kw">const</span> cachedResponse <span class="op">=</span> <span class="cf">await</span> <span class="va">cache</span>.<span class="at">match</span>(<span class="va">event</span>.<span class="at">request</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-7" title="7">        <span class="cf">if</span> (cachedResponse <span class="op">!==</span> <span class="kw">undefined</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb1-8" title="8">            </a>
<a class="sourceLine" id="cb1-9" title="9">            <span class="cf">return</span> cachedResponse<span class="op">;</span></a>
<a class="sourceLine" id="cb1-10" title="10">        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb1-11" title="11">            <span class="co">// Nothing in cache, let&#39;s go to the network.</span></a>
<a class="sourceLine" id="cb1-12" title="12">        <span class="op">}</span></a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="op">}</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="op">}</span></a></code></pre></div>
<p>Cache-first is a great strategy for quickly minimizing network requests, but it can be a bit naive and limiting if applied too generally to your application.</p>
<p>For static, long-term assets, cache-first works great. For quickly changing resources, however, a cache-first strategy can prevent data from getting much-needed updates and your user experience can suffer as a result.</p>
<p>Cache-first is a great starting point for improving performance reliability, but let’s take a look at something a little more flexible.</p>
<h2 id="stale-while-revalidate">Stale-While-Revalidate</h2>
<p>The <code>stale-while-revalidate</code> builds on cache-first to give us the best of both worlds: loading speed and freshness.</p>
<p>Like cache-first, this strategy will check the cache for the needed response and will return a match. However, instead of stopping there, we’ll take the request to the network anyway, and update the cache in the background with the response. If there’s a cache miss, we go straight to the network.</p>
<p>Let’s update our service worker snippet to reflect this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" title="1"><span class="va">self</span>.<span class="at">addEventListener</span>(<span class="st">&#39;fetch&#39;</span><span class="op">,</span> event <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="va">event</span>.<span class="at">respondWith</span>((<span class="kw">async</span> () <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-3" title="3">        <span class="kw">const</span> cache <span class="op">=</span> <span class="cf">await</span> <span class="va">caches</span>.<span class="at">open</span>(CACHE_NAME)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-4" title="4"></a>
<a class="sourceLine" id="cb2-5" title="5">        <span class="co">// Try the cache first like last time.</span></a>
<a class="sourceLine" id="cb2-6" title="6">        <span class="kw">const</span> cachedResponse <span class="op">=</span> <span class="cf">await</span> <span class="va">cache</span>.<span class="at">match</span>(<span class="va">event</span>.<span class="at">request</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-7" title="7">        <span class="cf">if</span> (cachedResponse <span class="op">!==</span> <span class="kw">undefined</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb2-8" title="8">            <span class="co">// Now, we fetch a new response and cache it in the background</span></a>
<a class="sourceLine" id="cb2-9" title="9">            <span class="at">fetch</span>(<span class="va">event</span>.<span class="at">request</span>).<span class="at">then</span>( response <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-10" title="10">                <span class="va">cache</span>.<span class="at">put</span>(<span class="va">event</span>.<span class="at">request</span><span class="op">,</span> <span class="va">response</span>.<span class="at">clone</span>())<span class="op">;</span></a>
<a class="sourceLine" id="cb2-11" title="11">            <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-12" title="12">            <span class="co">// We don&#39;t await the above line, so we return our cachedResponse right away</span></a>
<a class="sourceLine" id="cb2-13" title="13">            <span class="cf">return</span> cachedResponse<span class="op">;</span></a>
<a class="sourceLine" id="cb2-14" title="14">        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-15" title="15">            <span class="co">// Go to the network otherwise</span></a>
<a class="sourceLine" id="cb2-16" title="16">        <span class="op">}</span></a>
<a class="sourceLine" id="cb2-17" title="17">    <span class="op">}</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="op">}</span></a></code></pre></div>
<p>With this approach, we get the speed benefit of loading a cached response right away, but balance it by keeping our cache relatively up-to-date. Next time we make that request, we will get the updated response instead of the same cached response over and over again.</p>
<h2 id="maintaining-data-offline-with-indexeddb">Maintaining Data Offline with IndexedDB</h2>
<p>Caching works great for assets, but what about storing structured local data for our? We can use <a href="https://aka.ms/learn-pwa/30days-4.4/developer.mozilla.org/docs/Web/API/IndexedDB_API">IndexedDB</a> to handle our local data storage to keep our user experience as intact as possible in offline circumstances. IndexedDB allows for asynchronous storage of large quantities of structured data that would exceed the capabilities of our cache or LocalStorage.</p>
<p>The API for IndexedDB can be a bit low-level for normal usage, so we’ll be taking a look at simple wrapper called <a href="https://aka.ms/learn-pwa/30days-4.4/localforage.github.io/localForage">LocalForage</a>.</p>
<h2 id="using-localforage-to-manage-data">Using LocalForage to Manage Data</h2>
<p>We can use a hypothetical example to see how we might use LocalForage in an application.</p>
<p>Let’s pretend we are working on a simple email client, and we want to store the X most recent emails so that if our PWA loses connection, our user could still read their latest emails.</p>
<p><em>Note</em>: IndexedDB can be used from inside your application and your service worker, choose whatever (or both) works best for your use case.</p>
<p>First, we could create an instance (the same as a database) of localforage and name that instance:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb3-1" title="1"><span class="co">// our DB name</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="kw">const</span> databaseName <span class="op">=</span> <span class="st">&quot;EmailDB&quot;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="co">// create an instance with our name</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="kw">var</span> emailDatabase <span class="op">=</span> <span class="va">localforage</span>.<span class="at">createInstance</span>(<span class="op">{</span><span class="dt">name</span><span class="op">:</span> databaseName<span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>Now, let’s add our data to it using a key-value pair:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb4-1" title="1"><span class="co">// Let&#39;s get our recent emails as an array</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="kw">var</span> emails <span class="op">=</span> <span class="at">GetRecentEmails</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="co">// and add that to our database</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="va">emailDatabase</span>.<span class="at">setItem</span>(<span class="st">&quot;recent-emails&quot;</span><span class="op">,</span> emails)<span class="op">;</span></a></code></pre></div>
<p>Later, we can fetch our emails using the key and do something with the value:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb5-1" title="1"><span class="co">// Asynchronously fetch our emails and then populate our inbox</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="va">emailDatabase</span>.<span class="at">getItem</span>(<span class="st">&quot;recent-emails&quot;</span>).<span class="at">then</span>( emails <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-3" title="3">    <span class="at">PopulateInbox</span>(emails)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>And lastly, we can remove data just as easily:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" title="1"><span class="co">// remove based on key</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="va">emailDatabase</span>.<span class="at">removeItem</span>(<span class="st">&quot;recent-emails&quot;</span>)<span class="op">;</span></a></code></pre></div>
<p>Super easy, right? LocalForage keeps its API to just a handful of features for ease of use, and you can learn more about it’s capabilities <a href="https://aka.ms/learn-pwa/30days-4.4/localforage.github.io/localForage">here</a>. It’s a great option for getting started with IndexedDB and for storing data for simple use cases.</p>
<p>If you need something more flexible for your PWA, there’s also <a href="https://aka.ms/learn-pwa/30days-4.4/github.com/jakearchibald/idb">idb</a>, which is another great IndexedDB wrapper that packs more of a punch when it comes to functionality. However, it is somewhat more involved when it comes to managing your database and its transactions, so get ready for more complexity. If you like the style of idb, but want something simpler like LocalForage, there’s also <a href="https://github.com/jakearchibald/idb-keyval">idb-keyval</a>, which is maintained by the creator of idb and has a smaller package size than LocalForage.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>That’s it for Best Practices for PWA Reliability! There’s plenty more to do as far as making your PWA more reliable, but basic caching strategies and IndexedDB are great launching points for creating reliable offline web experiences. Only thing left to do now is to get out there and get caching!</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="../core-concepts/05.md">Making PWA Work Offline</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.4/web.dev/offline-cookbook">Offline Cookbook</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.4/developer.mozilla.org/docs/Web/API/IndexedDB_API">MDN IndexedDB documentation</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.4/localforage.github.io/localForage">LocalForage</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.4/github.com/jakearchibald/idb">idb</a></li>
</ul>]]></description>
    <pubDate>Wed, 9 Mar 2022 16:07:01 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[4.3: Distributing Your PWA]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/03</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/03</guid>
    <description><![CDATA[<h1 id="distributing-your-pwa">4.3: Distributing Your PWA</h1>
<figure>
<img src="_media/day3.png" alt="image of title and author." /><figcaption>image of title and author.</figcaption>
</figure>
<h3 id="what-ill-cover-today">What I’ll cover today</h3>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Section</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Why App Stores?</strong></td>
<td>Distributing your PWA through app stores brings more users to your app</td>
</tr>
<tr class="even">
<td><strong>Distribution model</strong></td>
<td>What publishing a PWA to app stores looks like</td>
</tr>
<tr class="odd">
<td><strong>Example</strong></td>
<td>A quick walk-through of publishing your PWA to an app store</td>
</tr>
</tbody>
</table>
<p>Welcome to <strong>week 4 day 3</strong> of <a href="https://aka.ms/learn-pwa/30Days-blog">30 days of PWA</a>. Today, you’ll discover how to distribute your PWA to app stores and the benefits in doing so.</p>
<h2 id="why-app-stores">Why App Stores?</h2>
<p>When I talk about publishing PWAs to app stores, devs often ask, “Why? Isn’t the point of PWAs that you don’t need an app store?”</p>
<p>And they’re right, you don’t <em>need</em> app stores. A great benefit of the web is there are no gatekeepers: you can publish your app without needing anyone’s permission. Your app is truly your own, and you don’t have to wait for app reviews to submit your app, add features to your app, or fix bugs. You don’t have to share 30% of your app revenue with the app store.</p>
<p>But app stores have their benefits too. Since the mobile computing explosion of the early 2000s, <strong>we’ve trained a generation of users to look for apps in app stores.</strong> And since Progressive Web Apps are, well, <em>apps</em>, why not list your app in the places where users go looking for apps? Your PWA becomes more discoverable – and your app gains more users – when you publish to app stores.</p>
<p>Your PWA will be easier to install. While users can add your PWA to homescreen or install from the browser, many non-technical users are unfamiliar with these tasks. Publishing your PWA to app stores lets users find and install your app using their normal workflow: app store ➡ search ➡ install.</p>
<p>You’ll get better engagement from users as your app tile appears where users are looking: in their Start Menu and Taskbar (Windows), Dock (Mac), and home screen (Android and iOS).</p>
<p>Users will be more likely to trust your app. An additional level of safety and security comes with apps that have gone through app store review processes.</p>
<h2 id="distribution-model">Distribution model</h2>
<p>Hopefully, I’ve piqued your interest in getting your PWA published to app stores.</p>
<p>To publish, you’ll follow three steps:</p>
<ol type="1">
<li>Create an app package for the app store</li>
<li>Register for a developer account for the app store</li>
<li>Submit your app package for review</li>
</ol>
<h3 id="create-an-app-package">1. Create an app package</h3>
<p>In an ideal world, you’d submit your PWA’s URL to the app store(s), and they’d publish your app.</p>
<p>But currently, app stores don’t support PWAs natively. Instead, app stores require you to wrap your PWA in app packaging, making it look like a native app:</p>
<ul>
<li>An <code>.msix</code> package (Windows)</li>
<li>An <code>.aab</code> package (Android)</li>
<li>An <code>.app</code> archive (iOS and Mac)</li>
<li>An <code>.apk</code> package (Oculus, Samsung, Amazon)</li>
</ul>
<p>Fortunately, there are free developer tools that create these app packages for you. Microsoft’s free and open source <a href="https://aka.ms/learn-pwa/30days-4.3/pwabuilder.com">PWABuilder</a> is such a tool. With PWABuilder, you input your PWA’s URL, and PWABuilder will generate app packages for your desired app stores.</p>
<h3 id="register-for-a-developer-account">2. Register for a developer account</h3>
<p>Once you generate your app package, you’ll need to create a developer account in order to submit your PWA for app store review:</p>
<ul>
<li>For Windows, register with <a href="https://aka.ms/learn-pwa/30days-4.3/partner.microsoft.com">Microsoft Partner Center</a></li>
<li>For Android, register with <a href="https://aka.ms/learn-pwa/30days-4.3/play.google.com/console/about">Google Play Console</a></li>
<li>For iOS and Mac, register with <a href="https://aka.ms/learn-pwa/30days-4.3/developer.apple.com/account">Apple Developer</a></li>
<li>For Oculus, register with <a href="https://aka.ms/learn-pwa/30days-4.3/developer.oculus.com/documentation/web/pwa-submit-app">Oculus Developer Center</a></li>
<li>For Samsung, register with <a href="hhttps://aka.ms/learn-pwa/30days-4.3/developer.samsung.com">Samsung Developer Center</a></li>
<li>For Amazon, register with <a href="https://aka.ms/learn-pwa/30days-4.3/developer.amazon.com/apps-and-games">Amazon Developer Portal</a></li>
</ul>
<p>While all these app stores support PWAs in some form, know that Microsoft, Android, and Amazon support PWAs the best:</p>
<ul>
<li>Windows has first-class support for Store PWAs through <a href="https://aka.ms/learn-pwa/30days-4.3/blogs.windows.com/windowsdeveloper/2020/03/19/hosted-app-model">Hosted App Model</a>, where your PWA is hosted by Chromium-based Edge.</li>
<li>Android has first-class support for Store PWAs through <a href="https://aka.ms/learn-pwa/30days-4.3/developer.chrome.com/docs/android/trusted-web-activity">Trusted Web Activity</a>, where your PWA is powered by Chrome.</li>
<li>Amazon’s App Store has improved support for Store PWAs, allowing you to submit your URL directly to the store, which is then powered by a web view when run on Amazon devices.</li>
</ul>
<p>The other app stores and platforms tend to have lesser support for PWAs, usually involving a native app wrapping a web view with some PWA functionality available. Consider, for example, that publishing a PWA on iOS won’t have Push Notifications available, because iOS and mobile Safari don’t currently support the web standard for push notifications.</p>
<p>The gap is closing, however, as platforms evolve and continue to improve their support for web technology.</p>
<p>In the future, we expect to see first-class support for PWAs in all the major app stores. Even as it stands today, your PWA will run on all platforms, and as long as you progressively enhance to use PWA features, your app will light up as platforms support more PWA functionality.</p>
<h3 id="submit-your-app-package-for-review">3. Submit your app package for review</h3>
<p>Once you’ve registered with the app store’s developer program, submit your app for review through the developer portal.</p>
<ul>
<li><a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/windows-platform">How to submit your PWA to Microsoft Store</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/android-platform">How to submit your PWA to Google Play</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/ios-platform">How to submit your PWA to iOS App Store</a></li>
</ul>
<p>Once you submit your app package, it’s treated like any other app: app store reviewers will inspect your app and, once approved, your app will be published in the app stores of your choosing.</p>
<p><strong>Subsequent updates of your PWA don’t need to be published through the Store</strong>. Since your PWA loads its asssets dynamically, any features or bug fixes you push to your web server will <em>automatically be reflected in your app in the Store</em>. Typically, you’d only need to update your app store package if changing things like app icons, app name, description, screenshots, or other metadata about your app.</p>
<h2 id="lets-publish-a-pwa-to-an-app-store">Let’s publish a PWA to an app store</h2>
<p>Go to <a href="https://aka.ms/learn-pwa/30days-4.3/pwabuilder.com">PWABuilder.com</a> and input the URL to your PWA. (Don’t have one yet? You can use <a href="https://aka.ms/learn-pwa/30days-4.3/webboard.app">https://webboard.app</a> to try it out.)</p>
<figure>
<img src="https://user-images.githubusercontent.com/312936/156713422-7f970deb-ad7c-40ce-8375-384e41f2efc7.png" alt="image" /><figcaption>image</figcaption>
</figure>
<p>PWABuilder will analyze your PWA to ensure you have a manifest and a service worker: <img src="https://user-images.githubusercontent.com/312936/156713592-74ed51c1-c736-4da7-9d66-762d1f671017.png" alt="image" /></p>
<p>Advance to the publish page and choose <code>Windows</code> -&gt; <code>Test Package</code>: <img src="https://user-images.githubusercontent.com/312936/156716438-5780cdbc-d1d9-4ff0-8576-527f147a118f.png" alt="image" /></p>
<p>(Why <code>Test Package</code>? This will let us test out our PWA on a Windows device before we publish to the Store.)</p>
<p>This will download a zip file containing your app package and instructions for testing it on your Windows device. If all looks good, you’re ready to <a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/publish-a-new-app-to-the-microsoft-store">publish to the Microsoft Store</a>:</p>
<ol type="1">
<li>Login to your <a href="https://aka.ms/learn-pwa/30days-4.3/partner.microsoft.com">Microsoft Partner Center account</a></li>
<li>Copy your <a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/finding-your-windows-publisher-info">publisher values</a></li>
<li>In PWABuilder, click <code>Windows</code> -&gt; <code>Store Package</code>, and paste in your publisher values.</li>
</ol>
<p>Your download will contain a Store-ready app package, which you can now upload to Partner Center for review.</p>
<p>Approval typically takes 24-48 hours, and once approved, you’re in the app store. 😎</p>
<h2 id="summary">Summary</h2>
<p>Publishing your PWA to app stores can make your app more discoverable, bringing more users into your app.</p>
<p>To publish your PWA to app stores, create an app package using tooling like <a href="https://aka.ms/learn-pwa/30days-4.3/pwabuilder.com">PWABuilder</a>.</p>
<p>Once you’ve created your app package, submit the package to the app store’s developer portal for review.</p>
<p>Happy packaging!</p>]]></description>
    <pubDate>Tue, 8 Mar 2022 16:06:11 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Week 4. Platform and Practices]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/README</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/README</guid>
    <description><![CDATA[<h1 id="week-4.-platform-and-practices">Week 4. Platform and Practices</h1>
<figure>
<img src="_media/week4-roadmap.png" alt="Visual Guide to Platforms &amp; Practices Week!" /><figcaption>Visual Guide to Platforms &amp; Practices Week!</figcaption>
</figure>
<h3 id="what-well-cover-in-week-4">WHAT WE’LL COVER IN WEEK 4</h3>
<h3 id="installability-for-pwas">4.1 |   <a href="01.md">Installability for PWAs</a></h3>
<ul>
<li>Quick recap of how to make PWAs installable</li>
<li>What types of apps should be installable?</li>
<li>App-first development strategy</li>
</ul>
<h3 id="best-practices-for-pwa-engagement">4.2 |   <a href="02.md">Best Practices for PWA Engagement</a></h3>
<ul>
<li>Best practices for notifications and push notifications</li>
<li>Setting an engagement strategy</li>
<li>Having actionable push notifications</li>
</ul>
<h3 id="distributing-your-pwa">4.3 |   <a href="03.md">Distributing Your PWA</a></h3>
<ul>
<li>PWAs are apps, so how can you get them on app stores?</li>
<li>Getting maximum discoverability, all with one codebase.</li>
<li>Walk through adding your PWA to the Microsoft Store</li>
</ul>
<h3 id="best-practices-for-pwa-reliability">4.4 |   <a href="04.md">Best Practices for PWA Reliability</a></h3>
<ul>
<li>How to preserve your user experience while offline</li>
<li>Caching strategies for reliable performance</li>
<li>LocalForage and other IndexedDB options to store offline data</li>
</ul>
<h3 id="pwa-maintainability-using-web-components">4.5 |   <a href="05.md">PWA Maintainability: Using Web Components</a></h3>
<ul>
<li>What does maintainability look like in larger (and possibly collaborative) web projects?</li>
<li>What are web components and what advantages do they bring?</li>
<li>How can we use them to build maintainable and scalable PWAs?</li>
</ul>
<h3 id="best-practices-for-pwa-authentication">4.6 |   <a href="06.md">Best Practices for PWA Authentication</a></h3>
<ul>
<li>When should your PWA use authentication?</li>
<li>Considerations for implementing authentication for your PWA</li>
<li>Adding authentication to your app</li>
</ul>
<h3 id="best-practices-for-pwa-uiux">4.7 |   <a href="07.md">Best Practices for PWA UI/UX</a></h3>
<ul>
<li>Responsiveness across all platforms</li>
<li>Focusing your PWA content</li>
<li>Seamless user interactions</li>
</ul>
<figure>
<img src="_media/week4-banner.png" alt="Visual Banner for Platforms &amp; Practices Week!" /><figcaption>Visual Banner for Platforms &amp; Practices Week!</figcaption>
</figure>]]></description>
    <pubDate>Tue, 8 Mar 2022 16:03:30 -0800</pubDate>
  </item>
  
</channel>
</rss>
