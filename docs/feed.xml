<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>30 Days of PWA</title>
  <atom:link href="https://aka.ms/learn-PWA/30Days-blog/feed.xml" rel="self" type="application/rss+xml" />
  <link>https://aka.ms/learn-PWA/30Days-blog</link>
  <description>For 30 days, we publish articles that aim to introduce developers to Progressive Web App. We have content that covers 0-level to 200-level topics. Each post takes 5-10 minutes to read and is followed by a sample snippet or exercise.</description>
   
  <item>
    <title><![CDATA[4.3: Distributing Your PWA]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/03</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/03</guid>
    <description><![CDATA[<h1 id="distributing-your-pwa">4.3: Distributing Your PWA</h1>
<figure>
<img src="_media/day3.png" alt="image of title and author." /><figcaption>image of title and author.</figcaption>
</figure>
<h3 id="what-ill-cover-today">What I’ll cover today</h3>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Section</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Why App Stores?</strong></td>
<td>Distributing your PWA through app stores brings more users to your app</td>
</tr>
<tr class="even">
<td><strong>Distribution model</strong></td>
<td>What publishing a PWA to app stores looks like</td>
</tr>
<tr class="odd">
<td><strong>Example</strong></td>
<td>A quick walk-through of publishing your PWA to an app store</td>
</tr>
</tbody>
</table>
<p>Welcome to <strong>week 4 day 3</strong> of <a href="https://aka.ms/learn-pwa/30Days-blog">30 days of PWA</a>. Today, you’ll discover how to distribute your PWA to app stores and the benefits in doing so.</p>
<h2 id="why-app-stores">Why App Stores?</h2>
<p>When I talk about publishing PWAs to app stores, devs often ask, “Why? Isn’t the point of PWAs that you don’t need an app store?”</p>
<p>And they’re right, you don’t <em>need</em> app stores. A great benefit of the web is there are no gatekeepers: you can publish your app without needing anyone’s permission. Your app is truly your own, and you don’t have to wait for app reviews to submit your app, add features to your app, or fix bugs. You don’t have to share 30% of your app revenue with the app store.</p>
<p>But app stores have their benefits too. Since the mobile computing explosion of the early 2000s, <strong>we’ve trained a generation of users to look for apps in app stores.</strong> And since Progressive Web Apps are, well, <em>apps</em>, why not list your app in the places where users go looking for apps? Your PWA becomes more discoverable – and your app gains more users – when you publish to app stores.</p>
<p>Your PWA will be easier to install. While users can add your PWA to homescreen or install from the browser, many non-technical users are unfamiliar with these tasks. Publishing your PWA to app stores lets users find and install your app using their normal workflow: app store ➡ search ➡ install.</p>
<p>You’ll get better engagement from users as your app tile appears where users are looking: in their Start Menu and Taskbar (Windows), Dock (Mac), and home screen (Android and iOS).</p>
<p>Users will be more likely to trust your app. An additional level of safety and security comes with apps that have gone through app store review processes.</p>
<h2 id="distribution-model">Distribution model</h2>
<p>Hopefully, I’ve piqued your interest in getting your PWA published to app stores.</p>
<p>To publish, you’ll follow three steps:</p>
<ol type="1">
<li>Create an app package for the app store</li>
<li>Register for a developer account for the app store</li>
<li>Submit your app package for review</li>
</ol>
<h3 id="create-an-app-package">1. Create an app package</h3>
<p>In an ideal world, you’d submit your PWA’s URL to the app store(s), and they’d publish your app.</p>
<p>But currently, app stores don’t support PWAs natively. Instead, app stores require you to wrap your PWA in app packaging, making it look like a native app:</p>
<ul>
<li>An <code>.msix</code> package (Windows)</li>
<li>An <code>.aab</code> package (Android)</li>
<li>An <code>.app</code> archive (iOS and Mac)</li>
<li>An <code>.apk</code> package (Oculus, Samsung, Amazon)</li>
</ul>
<p>Fortunately, there are free developer tools that create these app packages for you. Microsoft’s free and open source <a href="https://aka.ms/learn-pwa/30days-4.3/pwabuilder.com">PWABuilder</a> is such a tool. With PWABuilder, you input your PWA’s URL, and PWABuilder will generate app packages for your desired app stores.</p>
<h3 id="register-for-a-developer-account">2. Register for a developer account</h3>
<p>Once you generate your app package, you’ll need to create a developer account in order to submit your PWA for app store review:</p>
<ul>
<li>For Windows, register with <a href="https://aka.ms/learn-pwa/30days-4.3/partner.microsoft.com">Microsoft Partner Center</a></li>
<li>For Android, register with <a href="https://aka.ms/learn-pwa/30days-4.3/play.google.com/console/about">Google Play Console</a></li>
<li>For iOS and Mac, register with <a href="https://aka.ms/learn-pwa/30days-4.3/developer.apple.com/account">Apple Developer</a></li>
<li>For Oculus, register with <a href="https://aka.ms/learn-pwa/30days-4.3/developer.oculus.com/documentation/web/pwa-submit-app">Oculus Developer Center</a></li>
<li>For Samsung, register with <a href="hhttps://aka.ms/learn-pwa/30days-4.3/developer.samsung.com">Samsung Developer Center</a></li>
<li>For Amazon, register with <a href="https://aka.ms/learn-pwa/30days-4.3/developer.amazon.com/apps-and-games">Amazon Developer Portal</a></li>
</ul>
<p>While all these app stores support PWAs in some form, know that Microsoft, Android, and Amazon support PWAs the best:</p>
<ul>
<li>Windows has first-class support for Store PWAs through <a href="https://aka.ms/learn-pwa/30days-4.3/blogs.windows.com/windowsdeveloper/2020/03/19/hosted-app-model">Hosted App Model</a>, where your PWA is hosted by Chromium-based Edge.</li>
<li>Android has first-class support for Store PWAs through <a href="https://aka.ms/learn-pwa/30days-4.3/developer.chrome.com/docs/android/trusted-web-activity">Trusted Web Activity</a>, where your PWA is powered by Chrome.</li>
<li>Amazon’s App Store has improved support for Store PWAs, allowing you to submit your URL directly to the store, which is then powered by a web view when run on Amazon devices.</li>
</ul>
<p>The other app stores and platforms tend to have lesser support for PWAs, usually involving a native app wrapping a web view with some PWA functionality available. Consider, for example, that publishing a PWA on iOS won’t have Push Notifications available, because iOS and mobile Safari don’t currently support the web standard for push notifications.</p>
<p>The gap is closing, however, as platforms evolve and continue to improve their support for web technology.</p>
<p>In the future, we expect to see first-class support for PWAs in all the major app stores. Even as it stands today, your PWA will run on all platforms, and as long as you progressively enhance to use PWA features, your app will light up as platforms support more PWA functionality.</p>
<h3 id="submit-your-app-package-for-review">3. Submit your app package for review</h3>
<p>Once you’ve registered with the app store’s developer program, submit your app for review through the developer portal.</p>
<ul>
<li><a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/windows-platform">How to submit your PWA to Microsoft Store</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/android-platform">How to submit your PWA to Google Play</a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/ios-platform">How to submit your PWA to iOS App Store</a></li>
</ul>
<p>Once you submit your app package, it’s treated like any other app: app store reviewers will inspect your app and, once approved, your app will be published in the app stores of your choosing.</p>
<p><strong>Subsequent updates of your PWA don’t need to be published through the Store</strong>. Since your PWA loads its asssets dynamically, any features or bug fixes you push to your web server will <em>automatically be reflected in your app in the Store</em>. Typically, you’d only need to update your app store package if changing things like app icons, app name, description, screenshots, or other metadata about your app.</p>
<h2 id="lets-publish-a-pwa-to-an-app-store">Let’s publish a PWA to an app store</h2>
<p>Go to <a href="https://aka.ms/learn-pwa/30days-4.3/pwabuilder.com">PWABuilder.com</a> and input the URL to your PWA. (Don’t have one yet? You can use <a href="https://aka.ms/learn-pwa/30days-4.3/webboard.app">https://webboard.app</a> to try it out.)</p>
<figure>
<img src="https://user-images.githubusercontent.com/312936/156713422-7f970deb-ad7c-40ce-8375-384e41f2efc7.png" alt="image" /><figcaption>image</figcaption>
</figure>
<p>PWABuilder will analyze your PWA to ensure you have a manifest and a service worker: <img src="https://user-images.githubusercontent.com/312936/156713592-74ed51c1-c736-4da7-9d66-762d1f671017.png" alt="image" /></p>
<p>Advance to the publish page and choose <code>Windows</code> -&gt; <code>Test Package</code>: <img src="https://user-images.githubusercontent.com/312936/156716438-5780cdbc-d1d9-4ff0-8576-527f147a118f.png" alt="image" /></p>
<p>(Why <code>Test Package</code>? This will let us test out our PWA on a Windows device before we publish to the Store.)</p>
<p>This will download a zip file containing your app package and instructions for testing it on your Windows device. If all looks good, you’re ready to <a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/publish-a-new-app-to-the-microsoft-store">publish to the Microsoft Store</a>:</p>
<ol type="1">
<li>Login to your <a href="https://aka.ms/learn-pwa/30days-4.3/partner.microsoft.com">Microsoft Partner Center account</a></li>
<li>Copy your <a href="https://aka.ms/learn-pwa/30days-4.3/blog.pwabuilder.com/docs/finding-your-windows-publisher-info">publisher values</a></li>
<li>In PWABuilder, click <code>Windows</code> -&gt; <code>Store Package</code>, and paste in your publisher values.</li>
</ol>
<p>Your download will contain a Store-ready app package, which you can now upload to Partner Center for review.</p>
<p>Approval typically takes 24-48 hours, and once approved, you’re in the app store. 😎</p>
<h2 id="summary">Summary</h2>
<p>Publishing your PWA to app stores can make your app more discoverable, bringing more users into your app.</p>
<p>To publish your PWA to app stores, create an app package using tooling like <a href="https://aka.ms/learn-pwa/30days-4.3/pwabuilder.com">PWABuilder</a>.</p>
<p>Once you’ve created your app package, submit the package to the app store’s developer portal for review.</p>
<p>Happy packaging!</p>]]></description>
    <pubDate>Tue, 8 Mar 2022 16:06:11 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Week 4. Platform and Practices]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/README</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/README</guid>
    <description><![CDATA[<h1 id="week-4.-platform-and-practices">Week 4. Platform and Practices</h1>
<figure>
<img src="_media/week4-roadmap.png" alt="Visual Guide to Platforms &amp; Practices Week!" /><figcaption>Visual Guide to Platforms &amp; Practices Week!</figcaption>
</figure>
<h3 id="what-well-cover-in-week-4">WHAT WE’LL COVER IN WEEK 4</h3>
<h3 id="installability-for-pwas">4.1 |   <a href="01.md">Installability for PWAs</a></h3>
<ul>
<li>Quick recap of how to make PWAs installable</li>
<li>What types of apps should be installable?</li>
<li>App-first development strategy</li>
</ul>
<h3 id="best-practices-for-pwa-engagement">4.2 |   <a href="02.md">Best Practices for PWA Engagement</a></h3>
<ul>
<li>Best practices for notifications and push notifications</li>
<li>Setting an engagement strategy</li>
<li>Having actionable push notifications</li>
</ul>
<h3 id="distributing-your-pwa">4.3 |   <a href="03.md">Distributing Your PWA</a></h3>
<ul>
<li>PWAs are apps, so how can you get them on app stores?</li>
<li>Getting maximum discoverability, all with one codebase.</li>
<li>Walk through adding your PWA to the Microsoft Store</li>
</ul>
<h3 id="best-practices-for-pwa-reliability">4.4 |   <a href="04.md">Best Practices for PWA Reliability</a></h3>
<ul>
<li>How to preserve your user experience while offline</li>
<li>Caching strategies for reliable performance</li>
<li>LocalForage and other IndexedDB options to store offline data</li>
</ul>
<h3 id="pwa-maintainability-using-web-components">4.5 |   <a href="05.md">PWA Maintainability: Using Web Components</a></h3>
<ul>
<li>What does maintainability look like in larger (and possibly collaborative) web projects?</li>
<li>What are web components and what advantages do they bring?</li>
<li>How can we use them to build maintainable and scalable PWAs?</li>
</ul>
<h3 id="best-practices-for-pwa-authentication">4.6 |   <a href="06.md">Best Practices for PWA Authentication</a></h3>
<ul>
<li>When should your PWA use authentication?</li>
<li>Considerations for implementing authentication for your PWA</li>
<li>Adding authentication to your app</li>
</ul>
<h3 id="best-practices-for-pwa-uiux">4.7 |   <a href="07.md">Best Practices for PWA UI/UX</a></h3>
<ul>
<li>Responsiveness across all platforms</li>
<li>Focusing your PWA content</li>
<li>Seamless user interactions</li>
</ul>
<figure>
<img src="_media/week4-banner.png" alt="Visual Banner for Platforms &amp; Practices Week!" /><figcaption>Visual Banner for Platforms &amp; Practices Week!</figcaption>
</figure>]]></description>
    <pubDate>Tue, 8 Mar 2022 16:03:30 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[4.2: Best Practices for PWA Engagement]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/02</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/02</guid>
    <description><![CDATA[<h1 id="best-practices-for-pwa-engagement">4.2: Best Practices for PWA Engagement</h1>
<p><strong>Author: Zach Teutsch <span class="citation" data-cites="devteutsch">[@devteutsch]</span>(https://twitter.com/devteutsch)</strong></p>
<p>Welcome to Week 4, Day 2 of the <a href="https://aka.ms/learn-pwa/30Days-blog">30 Days of PWA</a> series! Now that we’ve seen how to start building PWAs and what basic and advanced capabilites they bring, it’s time to dive into what a <em>good</em> PWA really looks like it, and how we can turn our PWAs into quality application experiences. Week 4 is all about some of the best practices and technologies you can use to really polish up your PWA.</p>
<figure>
<img src="_media/day2.png" alt="Placeholder Banner Only. Replace when final assets ready." /><figcaption>Placeholder Banner Only. Replace when final assets ready.</figcaption>
</figure>
<h3 id="a-quick-note">A Quick Note</h3>
<p>This article is about the best practices for engagement with PWAs. If you’re looking for the basics on push notifications and badging in PWAs, check out the <a href="../advanced-capabilities/07.md">Notifying Your Users of Updates</a> article from Week 2.</p>
<h2 id="todays-plan">Today’s Plan</h2>
<p>As we briefly touched on in <a href="01.md">Day 1</a>, a carefully thought out engagement strategy can be one of the cornerstones of a great PWA. With the “one codebase” nature of PWA, it’s also easy to keep your engagement strategy consistent across different devices and platforms.</p>
<p>Today, we’re going to take a look at how PWAs stack up in terms of engagement and see how we can build on what we already learned about push notifications to get started off on the right foot with engagement.</p>
<h2 id="comparing-pwa-engagement">Comparing PWA Engagement</h2>
<p>You may not have taken the dive into making your first PWA, but others have! Engagement with PWAs has been a success story for several companies that have experimented with redesigning their web experiences as PWAs. <a href="https://aka.ms/learn-pwa/30days-4.2/pwastats.com">PWAstats.com</a> is a great resource for seeing how PWAs can improve many factors of your app, including engagement. Some cherry-picked figures related to engagement:</p>
<ul>
<li><strong>Starbucks doubled daily active users with their PWA</strong></li>
<li><strong>Tinder’s PWA saw engagement increase across the board</strong></li>
<li><strong>Forbes saw a 2x increase in session length and 20% increase in impressions through their PWA</strong></li>
</ul>
<p>Granted, progressive web apps aren’t a magic, one-size-fits all solution for engagement, but they do give you all the tools you need for building a re-engageable application.</p>
<h2 id="improving-engagement-with-actionable-push-notifications">Improving Engagement with Actionable Push Notifications</h2>
<p>We’ve seen some numbers. Now let’s take a look at how we can take advantage of <a href="https://aka.ms/learn-pwa/30days-4.2/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/notifications-badges">PWA notification capabilities</a> to improve engagement on our app.</p>
<h3 id="content-comes-first">Content Comes First</h3>
<p>Before you even think about sending push notifications, make sure your PWA has enough engageable content and reusability to even justify sending a push notification in the first place. If there’s nothing to do on your app, why prompt a user to visit?</p>
<h3 id="what-does-actionable-mean">What Does “Actionable” Mean?</h3>
<p>A great place to start with push notifications for your PWA is to make sure every notification has an action associated to it. When a user receives a notification, there should be something that the user can <strong>do</strong> that is directly related to your push. This could mean:</p>
<ul>
<li>Some new content to read or engage with</li>
<li>A message that the user can reply to</li>
<li>A new feature for the user to try out</li>
</ul>
<p>A quality notification will give the user something to do on your PWA, not just have them open the application for the sake of opening it.</p>
<h2 id="lets-see-some-code">Let’s See Some Code!</h2>
<p>We can build on the snippets that we saw in the <a href="../advanced-capabilities/07.md">Notifying Your Users of Updates</a> article to keep our notifications actionable in practice. If you haven’t seen the notifications snippets from that post, go check them out and then come back to this.</p>
<p>Using the <a href="https://aka.ms/learn-pwa/30days-4.2/developer.mozilla.org/docs/Web/API/Notification/Notification">Notification API</a>, we can take advantage of the <code>data</code> property to associate our notification with any structured data that we want.</p>
<p>So, if we want to associate our notification with a specific location in our PWA, the notification payload we send could look something like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb1-1" title="1"><span class="op">{</span></a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="dt">title</span><span class="op">:</span> <span class="st">&quot;Our Notification Title&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="dt">body</span><span class="op">:</span> <span class="st">&quot;Our Notifcation Message&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="dt">icon</span><span class="op">:</span> <span class="st">&quot;path/to/icon.png&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="dt">data</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb1-6" title="6">        <span class="dt">path</span><span class="op">:</span> <span class="st">&quot;&lt;relative path for our notification&gt;&quot;</span></a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="op">}</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="op">}</span></a></code></pre></div>
<p>Now, we can adjust the push listener in our service worker to make sure the displayed Notification captures our new <code>data</code> property:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" title="1"><span class="va">self</span>.<span class="at">addEventListener</span>(<span class="st">&#39;push&#39;</span><span class="op">,</span> (event) <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="kw">const</span> notificationData <span class="op">=</span> <span class="va">JSON</span>.<span class="at">parse</span>(<span class="va">event</span>.<span class="va">data</span>.<span class="at">text</span>())<span class="op">;</span></a>
<a class="sourceLine" id="cb2-3" title="3"></a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="va">event</span>.<span class="at">waitUntil</span>(</a>
<a class="sourceLine" id="cb2-5" title="5">        <span class="va">self</span>.<span class="va">registration</span>.<span class="at">showNotification</span>(<span class="va">notificationData</span>.<span class="at">title</span><span class="op">,</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-6" title="6">            <span class="dt">body</span><span class="op">:</span> <span class="va">notificationData</span>.<span class="at">message</span><span class="op">,</span></a>
<a class="sourceLine" id="cb2-7" title="7">            <span class="dt">icon</span><span class="op">:</span> <span class="va">notificationData</span>.<span class="at">icon</span><span class="op">,</span></a>
<a class="sourceLine" id="cb2-8" title="8">            <span class="dt">data</span><span class="op">:</span> <span class="va">notificationData</span>.<span class="at">data</span> <span class="co">// This is the only change from week 2</span></a>
<a class="sourceLine" id="cb2-9" title="9">        <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-10" title="10">    )<span class="op">;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>Our data property is now associated with our notification, and we can use that property in the listener for the <code>notificationclick</code> event in our service worker:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb3-1" title="1"><span class="va">self</span>.<span class="at">addEventListener</span>(<span class="st">&#39;notificationclick&#39;</span><span class="op">,</span> (event) <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb3-2" title="2">    <span class="co">// close the notification</span></a>
<a class="sourceLine" id="cb3-3" title="3">    <span class="va">event</span>.<span class="va">notification</span>.<span class="at">close</span>()<span class="op">;</span> </a>
<a class="sourceLine" id="cb3-4" title="4">    <span class="co">// append our relative path to our origin</span></a>
<a class="sourceLine" id="cb3-5" title="5">    <span class="kw">var</span> fullPath <span class="op">=</span> <span class="va">self</span>.<span class="va">location</span>.<span class="at">origin</span> <span class="op">+</span> <span class="va">event</span>.<span class="va">notification</span>.<span class="va">data</span>.<span class="at">path</span><span class="op">;</span> </a>
<a class="sourceLine" id="cb3-6" title="6">    <span class="co">// open our PWA at that location</span></a>
<a class="sourceLine" id="cb3-7" title="7">    <span class="va">clients</span>.<span class="at">openWindow</span>(fullPath)<span class="op">;</span> </a>
<a class="sourceLine" id="cb3-8" title="8"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>Using this strategy, we can easily associate our notification with specific content on our PWA, directing our users directly to the portion of our app that we want them to engage with.</p>
<p><em>Note:</em> This is a very basic implementation for our listener and skips out on some case handling for the sake of simplicity. You can see more detailed implementations in the <a href="https://aka.ms/learn-pwa/30days-4.2/github.com/MicrosoftEdge/pushnotifications-demo">Push Notifications Demo project</a> or in the MDN specification for <a href="https://aka.ms/learn-pwa/30days-4.2/developer.mozilla.org/docs/Web/API/Clients/openWindow"><code>openWindow()</code></a>.</p>
<h2 id="further-notification-behavior-with-actions">Further Notification Behavior with Actions</h2>
<p><a href="https://aka.ms/learn-pwa/30days-4.2/developer.mozilla.org/docs/Web/API/notification/actions">Some browsers</a>, including Edge and Chrome, have support for Notification <code>actions</code>, which allow you to add multiple options to a notification.</p>
<p>You can add actions to your Notification payload like so:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb4-1" title="1"><span class="op">{</span></a>
<a class="sourceLine" id="cb4-2" title="2">    <span class="dt">title</span><span class="op">:</span> <span class="st">&quot;Our Notification Title&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb4-3" title="3">    <span class="dt">body</span><span class="op">:</span> <span class="st">&quot;Our Notifcation Message&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb4-4" title="4">    <span class="dt">icon</span><span class="op">:</span> <span class="st">&quot;path/to/icon.png&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb4-5" title="5">    <span class="dt">actions</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb4-6" title="6">        <span class="op">{</span><span class="dt">action</span><span class="op">:</span> <span class="st">&quot;firstAction&quot;</span><span class="op">,</span> <span class="dt">title</span><span class="op">:</span> <span class="st">&quot;First Action&quot;</span><span class="op">,</span> <span class="dt">icon</span><span class="op">:</span> <span class="st">&quot;action1/icon.png&quot;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb4-7" title="7">        <span class="op">{</span><span class="dt">action</span><span class="op">:</span> <span class="st">&quot;secondAction&quot;</span><span class="op">,</span> <span class="dt">title</span><span class="op">:</span> <span class="st">&quot;Second Action&quot;</span><span class="op">,</span> <span class="dt">icon</span><span class="op">:</span> <span class="st">&quot;action2/icon.png&quot;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb4-8" title="8">    ]</a>
<a class="sourceLine" id="cb4-9" title="9"><span class="op">}</span></a></code></pre></div>
<p>We can update the notification we show to include our actions:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb5-1" title="1"><span class="va">event</span>.<span class="at">waitUntil</span>(</a>
<a class="sourceLine" id="cb5-2" title="2">    <span class="va">self</span>.<span class="va">registration</span>.<span class="at">showNotification</span>(<span class="va">notificationData</span>.<span class="at">title</span><span class="op">,</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-3" title="3">        <span class="dt">body</span><span class="op">:</span> <span class="va">notificationData</span>.<span class="at">message</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-4" title="4">        <span class="dt">icon</span><span class="op">:</span> <span class="va">notificationData</span>.<span class="at">icon</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-5" title="5">        <span class="dt">actions</span><span class="op">:</span> <span class="va">notificationData</span>.<span class="at">actions</span></a>
<a class="sourceLine" id="cb5-6" title="6">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-7" title="7">)<span class="op">;</span></a></code></pre></div>
<p>And then in our listener, we can handle different actions:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" title="1"><span class="va">self</span>.<span class="at">addEventListener</span>(<span class="st">&#39;notificationclick&#39;</span><span class="op">,</span> (event) <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-2" title="2">    <span class="co">// close the notification</span></a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="va">event</span>.<span class="va">notification</span>.<span class="at">close</span>()<span class="op">;</span> </a>
<a class="sourceLine" id="cb6-4" title="4">    <span class="co">// get the action</span></a>
<a class="sourceLine" id="cb6-5" title="5">    <span class="kw">var</span> action <span class="op">=</span> <span class="va">event</span>.<span class="va">notification</span>.<span class="at">action</span><span class="op">;</span></a>
<a class="sourceLine" id="cb6-6" title="6"></a>
<a class="sourceLine" id="cb6-7" title="7">    <span class="cf">if</span>(action <span class="op">===</span> <span class="st">&quot;firstAction&quot;</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-8" title="8">        <span class="co">// do something specific to first action</span></a>
<a class="sourceLine" id="cb6-9" title="9">    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span>( action <span class="op">===</span> <span class="st">&quot;secondAction&quot;</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-10" title="10">        <span class="co">// do something specific to second action</span></a>
<a class="sourceLine" id="cb6-11" title="11">    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-12" title="12">        <span class="co">// default if actions aren&#39;t supported or an action wasn&#39;t clicked</span></a>
<a class="sourceLine" id="cb6-13" title="13">    <span class="op">}</span></a>
<a class="sourceLine" id="cb6-14" title="14">    </a>
<a class="sourceLine" id="cb6-15" title="15"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>With actions, we can make our notifications a bit more dynamic and interactive for our users. You could even use the <code>data</code> property to provide paths for every action, generalizing this solution and making it a bit more reliable in practice. To make it a bit easier on yourself, the <a href="https://aka.ms/learn-pwa/30days-4.2/marketplace.visualstudio.com">PWA Studio VSCode extension</a> also has support for code snippets for working with notifications, with and without actions.</p>
<p><em>Note:</em> It’s important to always provide default behavior. Actions aren’t supported in some browsers and can behave differently in browsers that do support them.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Today, we took a brief look at how engagement can work on PWAs and how to get started working with quality, actionable notifications for our applications. You can adapt the tricks we showed you today to help with your own engagement strategy for your PWAs, but don’t forget that every application is going to be different: experiment and find what works for you!</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://aka.ms/learn-pwa/30days-4.2/developer.mozilla.org/docs/Web/API/Notification/Notification"><strong>Notification specification</strong></a></li>
<li><a href="https://aka.ms/learn-pwa/30days-4.2/docs.microsoft.com/microsoft-edge/progressive-web-apps-chromium/how-to/notifications-badgess"><strong>Re-engage users with badges, notifications, and push messages</strong></a> article on Microsoft Docs</li>
<li><a href="https://aka.ms/learn-pwa/30days-4.2/github.com/MicrosoftEdge/pushnotifications-demo"><strong>Push Notifications Demo Project</strong></a></li>
</ul>]]></description>
    <pubDate>Mon, 7 Mar 2022 15:55:33 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[4.1: Installability for PWAs]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/01</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/platforms-practices/01</guid>
    <description><![CDATA[<h1 id="installability-for-pwas">4.1: Installability for PWAs</h1>
<p><strong>Author: Zach Teutsch <span class="citation" data-cites="devteutsch">[@devteutsch]</span>(https://twitter.com/devteutsch)</strong></p>
<p>Welcome to Week 4, Day 1 of the <a href="https://aka.ms/learn-pwa/30Days-blog">30 Days of PWA</a> series! Now that we’ve seen how to <a href="../core-concepts/">start building PWAs</a> and what basic and <a href="../advanced-capabilities/">advanced capabilities</a> they bring, it’s time to dive into what a <em>good</em> PWA really looks like, and how we can turn our PWAs into quality application experiences. Week 4 is all about some of the best practices and technologies you can use to really polish up your PWA.</p>
<figure>
<img src="_media/day1.png" alt="Placeholder Banner Only. Replace when final assets ready." /><figcaption>Placeholder Banner Only. Replace when final assets ready.</figcaption>
</figure>
<h3 id="a-quick-note">A Quick Note</h3>
<p>This article is about the best practices for installability and when adding installation makes sense for a web application. If you’re looking for the basics on how to add installation to your PWA, check out the <a href="../core-concepts/03.md">Core Concepts article on Installation</a> from Week 1.</p>
<h2 id="you-dont-install-websites-you-install-apps">You Don’t Install Websites, You Install Apps</h2>
<p>One of the most important pieces of PWA installability is remembering that PWAs are <strong>apps first</strong>, and websites second. When a user installs an application to a device, they expect a certain standard of use and design that they’ve come to expect on whatever platform they use. PWAs are more than just installable websites, they are functional and integrated application experiences that <em>meet the expectations of the platform</em>.</p>
<h2 id="so-what-apps-websites-who-cares">So What? Apps, Websites, Who Cares?</h2>
<p>Seeing your PWA as an application instead of a website sets a different standard for the development of your product. It also forces the developer to think about whether or not their product even makes sense as a PWA. An app that is going to be installed needs to make sense within the context of the platform, and if it doesn’t, it might just be better off as a website.</p>
<p>Here are some questions you can ask when planning your PWA’s development:</p>
<ul>
<li><p><em><strong>What is going to be gained by the user from installing this app?</strong></em></p></li>
<li><p><em><strong>Does my app have to the potential to integrate with the operating system?</strong></em></p></li>
<li><p><em><strong>Does my app have motivation for regular use and re-engagement?</strong></em></p></li>
<li><p><em><strong>How will my app behave in offline conditions?</strong></em></p></li>
<li><p><em><strong>Does the appearance and feel of my app match with comparable native experiences?</strong></em></p></li>
</ul>
<p>It may not be necessary to apply all these questions to your app, but it’s a great starting place for thinking about what sorts of experiences should even be installed as PWAs in the first place.</p>
<p>Imagine your app installed and on somebody’s Home Screen or Taskbar. Does it make sense there?</p>
<h2 id="well-show-us-a-good-pwa-then.">Well, show us a good PWA, then.</h2>
<p>There’s a ton of great PWAs out there, but <a href="https://aka.ms/learn-pwa/30days-4.1/twitter.com">Twitter</a> is a great example of a well-known platform that has created a really well-done PWA for their users. Twitter’s PWA takes advantage of many of the available web capabilities to create an integrated app-like experience.</p>
<figure>
<img src="_media/twitter-pwa.png" alt="Twitter PWA open on Windows" /><figcaption>Twitter PWA open on Windows</figcaption>
</figure>
<p>Some of the things that I like about Twitter’s PWA:</p>
<p><strong>Smooth, app-like user experience</strong></p>
<p>Twitter’s PWA doesn’t show a lot of the behaviors that many typical websites would: * It uses the <code>standalone</code> <a href="../advanced-capabilities/04.md">display mode</a> to present the the window as an app. * The view never refreshes, the shell UI is always visible and only the main content area changes with user interaction. * There’s very little latency on navigation. Fetched content (like the tweets themselves) may take a second to load, but the UI interactivity itself is nearly instant.</p>
<p>We’ll learn more about best practices for PWA UI/UX on <a href="07.md">Day 7</a> of Platforms and practices week.</p>
<p><strong>Consistent offline behavior</strong></p>
<p>Even though Twitter relies pretty heavily on connectivity, it still maintains as much of the app interaction as possible when connection is lost (just like any native app would).</p>
<p>When connection is lost, the app still loads its view and the UI is still navigable. If there are any tweets stored locally, those will be displayed. If there aren’t, the user will get a notice that doesn’t interfere with the rest of the UI:</p>
<figure>
<img src="_media/twitter-offline.png" alt="Twitter offline warning" /><figcaption>Twitter offline warning</figcaption>
</figure>
<p>We already learned a little about offline behavior on <a href="../core-concepts/05.md">Day 5</a> of Week 1 and more is coming in the <a href="04.md">reliability article</a> later this week.</p>
<p><strong>OS integration and plenty of web capabilities</strong></p>
<p>Twitter also makes great use of available web capabilities to integrate with your device. Just to list some:</p>
<ul>
<li>Push notifications</li>
<li>Sharing from Twitter</li>
<li>Sharing to Twitter</li>
<li>Badging</li>
<li>Shortcuts</li>
</ul>
<figure>
<img src="_media/twitter-push.jpg" alt="Push Notification from Twitter" /><figcaption>Push Notification from Twitter</figcaption>
</figure>
<p>We already covered how to use all these capabilities and more in <a href="../advanced-capabilities">Week 2: Advanced Capabilities.</a> Go check them out!</p>
<p><strong>Published to the Microsoft Store</strong></p>
<p>Twitter takes advantage of one the best parts about PWAs: discoverability and installability on the web <em>and</em> in app stores.</p>
<figure>
<img src="_media/twitter-in-store.png" alt="Twitter in the Microsoft Store" /><figcaption>Twitter in the Microsoft Store</figcaption>
</figure>
<p>The same PWA the can be installed from the browser can be distributed in app stores. You can learn more about packaging for the stores in our <a href="../dev-tools/07.md">article on PWABuilder</a> and more info about best practices for distribution to different app stores is coming <a href="03.md">later this week.</a></p>
<h2 id="summary">Summary</h2>
<p>At the end of the day, best practices for PWA installability are really just about best practices for PWAs in general. When you prompt a user to install your app to their machine, that app needs to live up to the expectations of applications on that platform. Luckily enough, we’re going to spend all week building on what we’ve already learned about PWAs and seeing some best practices for making solid PWA experiences. If you’re looking to get a head start, check out the <a href="https://aka.ms/learn-pwa/30days-4.1/github.com/pwa-builder/pwa-starter">PWA Starter</a> for a PWA template that’s built with best practices in mind.</p>
<h3 id="exercise"><strong>Exercise</strong></h3>
<p>Think about some of your favorite web experiences that you use or have built yourself.</p>
<p>Would any of these experiences make good PWAs? Would any of them not?</p>
<p>What could these experiences gain by taking advantage of some of the capabilites that PWAs bring to the table?</p>
<h3 id="resources"><strong>Resources</strong></h3>
<ul>
<li><strong><a href="https://aka.ms/learn-pwa/30days-4.1/docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium">Microsoft PWA Overview</a></strong></li>
<li><strong><a href="../advanced-capabilities/">PWA Advanced Capabilities Week</a></strong></li>
</ul>]]></description>
    <pubDate>Sun, 6 Mar 2022 17:41:46 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[3.7: Packaging tools]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/07</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/07</guid>
    <description><![CDATA[<h1 id="packaging-tools">3.7: Packaging tools</h1>
<p><strong>Author: Jaylyn Barbee <span class="citation" data-cites="jaylynsatwork">[@jaylynsatwork]</span>(https://twitter.com/jaylynsatwork)</strong></p>
<p>Welcome to <strong>Week 3 Day 7</strong> of #30DaysOfPWA! Want to learn more about this project? Check out our <a href="../kickoff.md">Kickoff</a> post to get more details on the content roadmap and contributors. Now, let’s dive in!</p>
<figure>
<img src="_media/day-07.jpg" alt="image of title and author." /><figcaption>image of title and author.</figcaption>
</figure>
<h3 id="what-well-cover-today">WHAT WE’LL COVER TODAY</h3>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Section</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Introduction</strong></td>
<td>Introduction to packaging for the Windows Store</td>
</tr>
<tr class="even">
<td><strong>Step 1: Packaging</strong></td>
<td>A walkthrough of the PWA Builder process to package your app for the Windows Store</td>
</tr>
<tr class="odd">
<td><strong>Step 2: Partner Center</strong></td>
<td>A walkthrough of Partner Center and how to submit your app to the Store</td>
</tr>
<tr class="even">
<td><strong>Why the Microsoft Store?</strong></td>
<td>An explanation of why you would chose the Microsoft Store over any others</td>
</tr>
</tbody>
</table>
<h1 id="packaging-for-the-windows-store">Packaging for the Windows Store</h1>
<h2 id="introduction">Introduction</h2>
<p>Great! You’ve just finished your web app and you are ready to send it off into the stores! Luckily for you, PWA Builder makes that as easy as pie. PWA Builder makes it possible to ship your app into multiple stores including the Google Play Store and Apple App Store. In this article we will focus on how to use our tools to package your PWA for the Microsoft Store, via the Partner Center. This is the last step, sharing your PWA with the world and now its time for all your hard work to pay off! Before we get started, here are some things you might want to have ready:</p>
<ul>
<li>A 512px by 512px icon (at least)
<ul>
<li>This will be used for your app icon</li>
</ul></li>
<li>Screenshots
<ul>
<li>For the Microsoft Store, you’re going to want laptop/tablet sized screenshots of your app to display in a carousel on your product description page. The exact pixel dimensions will be given to you in the Partner Center, where you will be publishing your app for the Microsoft Store (more on that later)</li>
</ul></li>
<li>Short Description &amp; Long Description
<ul>
<li>The short description may be the same as what you have in your manifest while the long description is a more in-depth summary of what your app is and what it does</li>
</ul></li>
<li>A privacy policy if your app can access, collect, or transmit personal information (data that could be used to identify a person).</li>
<li>A personal Microsoft account (create one <a href="https://aka.ms/learn-PWA/30Days-3.7/signup.live.com">here</a> if needed)</li>
<li>$20 to pay for your Partner Center account.This covers the monitoring of your app and prevents spam apps from being submitted. (Google Play Store: $25, Apple App Store: $99)</li>
<li>The URL to your site.</li>
</ul>
<p>With the above four items, you are ready to begin.</p>
<h2 id="step-1-packaging">Step 1: Packaging</h2>
<p>In order to package for the Windows store, you are going to want to navigate to <a href="https://aka.ms/learn-PWA/30Days-3.7/pwabuilder.com">pwabuilder.com</a> and enter the url to your web app on the home page.</p>
<figure>
<img src="_media/07_pwabuilder_home.png" alt="pwa builder home page" /><figcaption>pwa builder home page</figcaption>
</figure>
<p>After a few tests run to verify the quality of your PWA, you’ll receive a report card detailing what you do well and some areas for improvement.</p>
<figure>
<img src="_media/07_pwabuilder_rc.png" alt="pwa builder report card page" /><figcaption>pwa builder report card page</figcaption>
</figure>
<p>At the bottom of this page, you can press “Next” and you will be at the publishing page of PWABuilder. You can press “Store Package” in the Windows section and you are greeted with a pop up to input a few options.</p>
<figure>
<img src="_media/07_pwabuilder_pub.png" alt="pwa builder publish page" /><figcaption>pwa builder publish page</figcaption>
</figure>
<p>In a new tab, you are going to want to head over to <a href="https://aka.ms/learn-PWA/30Days-3.7/partner.microsoft.com">Partner Center</a> and register your app.</p>
<p><strong>It is important that you register your app on Partner Center with the same name you listed in your manifest. When it comes time to upload your app bundles, it will check if the bundle matches the name of the registered app.</strong></p>
<p>Information on how to register your app can be found <a href="https://aka.ms/learn-PWA/30Days-3.7/blog.pwabuilder.com/docs/publish-a-new-app-to-the-microsoft-store">here</a> and information on <a href="https://aka.ms/learn-PWA/30Days-3.7/blog.pwabuilder.com/docs/finding-your-windows-publisher-info">where</a> to find the necessary Ids can be found here. Once you have inputted your publisher information, you can press generate and download your app bundles.</p>
<h2 id="step-2-partner-center">Step 2: Partner Center</h2>
<p>If you are inside of your app on Partner Center, you will see a button that says, “Start your submission”. After clicking on that you will see a list of options you will need to take care of before your submission is ready to be reviewed. Since you made sure to have everything on the checklist above, these sections should be a breeze.</p>
<figure>
<img src="_media/07_pc.png" alt="partner center submission page" /><figcaption>partner center submission page</figcaption>
</figure>
<p>After completing each task under each headers, your app is ready for review. These tasks will include setting up your product description page, getting your IARC rating, and uploading your app bundles that you got from PWA Builder. The review process takes about 24 hours and the feedback will either be precisely what was wrong with your submission so you can fix it or a congratulations message letting your know that your submission has been processed and your app will be in the store within the next two hours.</p>
<figure>
<img src="_media/07_store.png" alt="windows store webboard product description page" /><figcaption>windows store webboard product description page</figcaption>
</figure>
<p>PWA Builder helps you to create store ready PWAs with robust descriptions pages: all while keeping the app submission process as simple as possible.</p>
<h2 id="why-the-microsoft-store">Why the Microsoft Store?</h2>
<p>The Microsoft store is an excellent place for your app to live. All of your in-app purchases (whether that be through Stripe or a custom payment system) go 100% to you. Microsoft will not take a cut. All of your analytics that you have running for your website will behave seemlessly. And most importantly, PWAs submitted through the Microsoft Store are TRUE PWAs; meaning they are not wrapped in a webview. There will be no “gotchas” or extra hoops to jump through in order for your app to feel native. It will just work. I promise I am not making this up, I submitted my very own app, “Sync’d - a Social Calendar App”, to the Microsoft Store in early February. I downloaded the app and it looked flawless, exactly like I expected. The cherry on top is that my app was reviewed, approved and in the Store in 24 hours.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>PWABuilder makes packaging for the Microsoft Store easier than ever. For additional resources on how to package and much more, you can visit the <a href="https://aka.ms/learn-PWA/30Days-3.7/blog.pwabuilder.com">PWABuilder Blog</a> page.</p>]]></description>
    <pubDate>Sun, 6 Mar 2022 10:44:25 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[3.6: Test automation tools]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/06</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/06</guid>
    <description><![CDATA[<h1 id="test-automation-tools">3.6: Test automation tools</h1>
<p><strong>Author: Nitya Narasimhan <span class="citation" data-cites="nitya">[@nitya]</span>(https://twitter.com/nitya)</strong></p>
<p>Welcome to Week 3, <strong>Day 6</strong> of #30DaysOfPWA. Check out our <a href="../kickoff.md">Kickoff</a> post to learn about our roadmap and contributors. In today’s post we’ll talk about <em>Test Automation</em> - what it is, why it matters, and developer tools to help us build reliable end-to-end testing workflows for our PWA.</p>
<figure>
<img src="_media/day-06.jpg" alt="image of title and author." /><figcaption>image of title and author.</figcaption>
</figure>
<h3 id="what-well-cover-today">WHAT WE’LL COVER TODAY</h3>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Section</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Test Automation</strong></td>
<td>What is it and why does it matter for modern web apps?</td>
</tr>
<tr class="even">
<td><strong>Test Pyramid</strong></td>
<td>What does a testing strategy for modern web apps involve?</td>
</tr>
<tr class="odd">
<td><strong>Testing PWA</strong></td>
<td>What does a functional testing spec for PWA need?</td>
</tr>
<tr class="even">
<td><strong>Hello, Playwright</strong></td>
<td>Reliable end-to-end test framework for modern web apps.</td>
</tr>
<tr class="odd">
<td><strong>Using Playwright</strong></td>
<td>Explore quickstarts, powerful tools, and PWA test scenarios</td>
</tr>
<tr class="even">
<td><strong>Exercise</strong></td>
<td>Take Playwright for a spin with a sample PWA!</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="test-automation">Test Automation</h2>
<p>Test Automation is the practice of <em>executing tests automatically</em> to validate software product functionality, then <em>using testing insights</em> to iteratively improve product quality. Test Automation is key to continuous delivery in modern DevOps culture: build-deploy pipelines keep software products in a continuous state of readiness for production release.</p>
<p>Why explore Test Automation for PWA? Two reasons: growing test complexity &amp; better tooling capability.</p>
<h4 id="testing-complexity">Testing Complexity</h4>
<p>Progressive Web Apps combine the reach of traditional web apps with the richer capability of platform-native apps. The first needs <em>cross-browser</em> testing to ensure usable experiences across all targeted browsers. The second needs <em>progressive enhancement</em> testing strategies to validate the enhanced experiences available to more capable devices.</p>
<p>Increased frequency of testing (e.g., on every feature commit or bug fix) coupled with many testing granularities (unit, integration, end-to-end) and configurations (browsers, device platforms) makes manual testing time-consuming and error-prone. This is where test automation excels, reducing time to detect issues, eliminating operator errors, and scaling effectively with cloud resources.</p>
<h4 id="tooling-capability">Tooling Capability</h4>
<p>Adopting automated testing strategies today is a no-brainer thanks to the rich ecosystem of tools and technologies available to web developers. Modern web automation software can execute user actions and other operations on a web browser without human intervention. Check out the <a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/test-and-automation/test-and-automation">Microsoft Edge docs</a> for more on relevant testing tools and technologies for web development, including:</p>
<ul>
<li><em><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/webdriver-chromium/c-sharp">WebDriver</a></em> - a W3C standard wire protocol for out-of-process clients to remotely instruct browsers.</li>
<li><em><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/devtools-protocol-chromium">DevTools Protocol</a></em> - directly inspect, debug, and profile, Chromium-based browsers like Edge.</li>
<li><em><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/puppeteer">Puppeteer</a></em> - a Node.js <em>library</em> for browser automation using DevTools Protocol.</li>
<li><em><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/playwright">Playwright</a></em> - <em>framework</em> for reliable end-to-end testing of modern web apps, across browsers.</li>
<li><em><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/test-and-automation/webhint">webhint</a></em> - linter for accessibility, performance, security, PWA and cross-browser compatibility.</li>
</ul>
<p>We’ll focus on <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev"><em>Playwright</em></a> in this post - but do explore the other resources to learn how they fit into your testing toolkit.</p>
<h2 id="test-pyramid">Test Pyramid</h2>
<p>To craft an Agile testing strategy, it helps to use visual metaphors like this <a href="https://aka.ms/learn-PWA/30Days-3.6/www.pearson.com/us/higher-education/program/Cohn-Succeeding-with-Agile-Software-Development-Using-Scrum/PGM201415.html">practical test pyramid</a> that organizes our thinking around two guiding principles: (1) Write tests at various granularities, and (2) Write <em>fewer</em> tests as you go higher up the pyramid.</p>
<p>What does testing granularity mean? My version of the pyramid has unit testing at the base, with exploratory testing at the top. Test automation helps with the bottom four layers, while manual testing is key to uncovering “gaps” that automated testing might overlook at the top.</p>
<figure>
<img src="_media/6-test-pyramid.png" alt="Visualization of Practical test pyramid" /><figcaption>Visualization of Practical test pyramid</figcaption>
</figure>
<p>In implementing the strategy, we want <em>many small, fast tests</em> at the base, and <em>fewer more coarse-grained tests</em> as we go higher. There are numerous unit testing libraries and tools that make the first objective achievable. But end-to-end test automation can be <a href="https://aka.ms/learn-PWA/30Days-3.6/martinfowler.com/articles/practical-test-pyramid.html#TheImportanceOftestAutomation">“notoriously flaky”</a> given the many “browser quirks, timing issues, animations, and unexpected UI interactions” that we need to deal with.</p>
<p>This is where having a reliable testing framework like Playwright really helps. Its <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/api/class-suite#suite-tests">test hierarchies</a> make it easy to compose high-level <em>test suites</em> from low-level <em>test cases</em> - and use <em>test configurations</em> with multiple <em>test projects</em> to create maximum flexibility. The <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/intro">test runner</a> can focus on execution, running tests in parallel for efficiency, using multiple projects for cross-browser coverage, and capturing traces for post-execution analysis.</p>
<h2 id="testing-pwa">Testing PWA</h2>
<p>Next, let’s think about the <em>functional</em> specification of these tests - what kinds of features (unit testing) and interaction workflows (end-to-end testing) should we consider for Progressive Web Apps? Here’s one way to approach this:</p>
<ul>
<li><strong>PWAs are web apps.</strong> Start with existing <a href="https://aka.ms/learn-PWA/30Days-3.6/developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies">“strategies for carrying out testing”</a> for web apps, and identify the optimal testing configurations (target devices, browsers) for your intended audience.</li>
<li><strong>PWAs have additional <a href="../core-concepts/01.md">desirable characteristics</a></strong> to validate. We know from the <a href="05.md">previous post</a> that <em>auditing tools</em> are ideal here and can be integrated into a test automation workflow it they expose a programmable interface. Ex: <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/abhinaba-ghosh/playwright-lighthouse">playwright-lighthouse</a> makes it easy to run Lighthouse audits as part of your end-to-end testing workflow.</li>
<li><strong>PWAs may have functional testing requirements</strong> for core components, that are automation-friendly. Ex: we can <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/api/class-browsercontext#browser-context-set-offline">emulate offline mode</a> to test service workers and caching strategies. Read this <a href="https://aka.ms/learn-PWA/30Days-3.6/medium.com/dev-channel/testing-service-workers-318d7b016b19">testing service workers</a> post for useful guidance.</li>
<li><strong>PWAs may use new or experimental <a href="../advanced-capabilities/01.md">web capabilities</a></strong> that are unevenly supported across browsers and devices. We can use <a href="https://aka.ms/learn-PWA/30Days-3.6/developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection">feature detection</a> to test for their existence on target devices, and execute conditional test actions based on the outcome.</li>
</ul>
<p>But how can we put these specifications into implementation for reliable end-to-end testing? Let’s talk about Playwright!</p>
<h2 id="hello-playwright">Hello, Playwright!</h2>
<p><a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev">Playwright</a> is an open-source testing framework that enables reliable end-to-end testing and automation for modern web applications. It comes with a built-in <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/next/intro">Playwright Test Runner</a> for test automation, and a <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/next/library">Playwright Library</a> to simplify integration with third-party solutions.</p>
<figure>
<img src="_media/6-hello-playwright.jpg" alt="A Visual Introduction to the Playwright Testing Framework" /><figcaption>A Visual Introduction to the Playwright Testing Framework</figcaption>
</figure>
<p>Playwright has a number of benefits that differentiate it from other test automation frameworks. Scan the visual guide for more details on each: * It has a unified <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/next/api/class-playwright">API</a> for use across browsers and device platforms. * It enables mobile web testing with <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/emulation">native emulation</a> and rich <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/microsoft/playwright/blob/bdfe92f8a7499644c431c5c05de17d71e6006084/packages/playwright-core/src/server/deviceDescriptorsSource.json">device profiles</a>. * It has multi-language support - including TypeScript, JavaScript, Java, Python and .NET. * No flaky testing - with <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/actionability">auto-waiting</a> and <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/test-assertions">web-first assertions</a> eliminating messy timeouts. * No limits - aligns with modern web architectures, runs out-of-process, and supports multi-everything. * Powerful tools - for authoring, debugging, profiling, and reporting tests and execution. * Full isolation - with browser contexts ready in ms, fast execution and <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/test-parallel">parallelization</a> options.</p>
<p>Want to get hands-on experience with the various capabilities? Check out the <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/MarcusFelling/demo.playwright">demo.playwright</a> repository for code examples showcasing test scenarios for accessibility, android, authentication, performance (DevTools &amp; Lighthouse), and visual-comparison. Plus, learn how <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/ci">Continuous Integration</a> options like GitHub Actions work seamlessly with Playwright, right out of the box.</p>
<h2 id="using-playwright">Using Playwright</h2>
<p>Playwright currently has two options to kickstart your end-to-end testing journey: * Use the <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/intro">Getting Started</a> guide to use Playwright from the command line. * Use the <a href="https://aka.ms/learn-PWA/30Days-3.6/ms-playwright.playwright">Playwright Test for VSCode</a> extension (<em>in preview</em>) to use Playwright from the IDE.</p>
<p>For now, we’ll use the first option since the extension is still in preview and works only with the latest version of Playwright Test. In an earlier post, I <a href="../core-concepts/07.md">PWA-enabled an existing web app</a>. Today, I’ll revisit that project and instrument it for end-to-end testing with Playwright. Ready? Let’s go.</p>
<h3 id="install-playwright">1. Install Playwright</h3>
<p>Since I’m scaffolding Playwright tests for an <em>existing</em> project, I’ll use the command below. If you are <em>creating</em> a new project, just add the project name as the final argument.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb1-1" title="1">$ npm init playwright</a></code></pre></div>
<p>The output looks as shown (compressed for clarity). Note that you can choose to get a GitHub Actions workflow instrumented for you during setup. The scaffolding process may take a while the first time since it installs Playwright (Test runner and library) and all supported browsers (Chromium, Firefox and Webkit) by default.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" title="1">Need to install the following packages<span class="op">:</span></a>
<a class="sourceLine" id="cb2-2" title="2">  create<span class="op">-</span>playwright</a>
<a class="sourceLine" id="cb2-3" title="3">Ok to proceed<span class="op">?</span> (y) y</a>
<a class="sourceLine" id="cb2-4" title="4">Getting started <span class="cf">with</span> writing end<span class="op">-</span>to<span class="op">-</span>end tests <span class="cf">with</span> Playwright:</a>
<a class="sourceLine" id="cb2-5" title="5">Initializing project <span class="kw">in</span> <span class="st">&#39;.&#39;</span></a>
<a class="sourceLine" id="cb2-6" title="6">✔ Do you want to use TypeScript or JavaScript<span class="op">?</span> · JavaScript</a>
<a class="sourceLine" id="cb2-7" title="7">✔ Where to put your end<span class="op">-</span>to<span class="op">-</span>end tests<span class="op">?</span> · e2e<span class="op">-</span>tests</a>
<a class="sourceLine" id="cb2-8" title="8">✔ Add a GitHub Actions workflow<span class="op">?</span> (Y/n) · <span class="kw">true</span></a>
<a class="sourceLine" id="cb2-9" title="9">Installing Playwright <span class="va">Test</span>  ...</a>
<a class="sourceLine" id="cb2-10" title="10">Downloading <span class="at">browsers</span> (npx playwright install) ...</a>
<a class="sourceLine" id="cb2-11" title="11">..</a>
<a class="sourceLine" id="cb2-12" title="12">Writing <span class="va">playwright</span>.<span class="va">config</span>.<span class="va">js</span>.</a>
<a class="sourceLine" id="cb2-13" title="13"><span class="va">Writing</span> .<span class="at">github</span>/workflows/<span class="va">playwright</span>.<span class="va">yml</span>.</a>
<a class="sourceLine" id="cb2-14" title="14">Writing e2e<span class="op">-</span>tests/<span class="va">example</span>.<span class="va">spec</span>.<span class="va">js</span>.</a>
<a class="sourceLine" id="cb2-15" title="15">Writing <span class="im">package</span>.<span class="va">json</span>.</a>
<a class="sourceLine" id="cb2-16" title="16">✔ Success<span class="op">!</span> Created a Playwright Test project at <span class="op">&lt;</span>....<span class="op">&gt;</span></a></code></pre></div>
<p>The end result: three key files - a test <em>specification</em>, a test <em>configuration</em>, and a <em>GitHub Actions workflow</em> for continuous integration. We’ll review these later.</p>
<h3 id="run-playwright-test">2. Run Playwright test</h3>
<p>The process ends by suggesting we run <code>npx playwright test</code> so let’s do that. We see that the default test specification apparently defines <em>75</em> tests and uses <em>3 workers</em> (one for each browser project), completing the entire run in 35 seconds.</p>
<pre><code>$ npx playwright test
Running 75 tests using 3 workers
...
  75 passed (35s)

To open last HTML report run:
  npx playwright show-report</code></pre>
<h3 id="view-the-html-report">3. View the HTML Report</h3>
<p>Excellent! The default tests ran and passed! And hey - we have a report so let’s check that out!</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb4-1" title="1">$ npx playwright show<span class="op">-</span>report</a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3">  Serving HTML report at http<span class="op">:</span><span class="co">//127.0.0.1:9323. Press Ctrl+C to quit.</span></a></code></pre></div>
<p>The report looks something like this. Note how it provides execution time stats on a <em>per-test (case) + per-browser (project)</em> basis, and for the spec (test suite) as a whole.</p>
<figure>
<img src="_media/6-playwright-report.png" alt="Playwright HTML Report" /><figcaption>Playwright HTML Report</figcaption>
</figure>
<p>The HTML reporting format allows you to drill down further into test steps, and break down the time taken for executing each test action. This is what the report looks like when you click on the first line item, and drill down into details. For instance, we can see the test step involved, along with the actual code that was executed from the script.</p>
<figure>
<img src="_media/6-playwright-report-detail.png" alt="Playwright HTML Report" /><figcaption>Playwright HTML Report</figcaption>
</figure>
<h3 id="validate-github-actions-workflow">4. Validate GitHub Actions workflow</h3>
<p>Great! We validated the test script locally and checked that it ran against all browser targets <em>and</em> generated a report that we were able to view locally. The setup step also created a <code>playwright.yml</code> file with the GitHub actions workflows for running Playwright tests and uploading reporting artifacts for post-run analysis.</p>
<p>Let’s validate that this works by committing our code to GitHub to trigger the workflow. You can see the initial scaffolded code in my <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/fearlessly-dev/recipe-me/tree/add-playwright">add-playwright</a> branch with these key files: * <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/fearlessly-dev/recipe-me/blob/add-playwright/.github/workflows/playwright.yml">playwright.yml</a> = GitHub Actions workflow * <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/fearlessly-dev/recipe-me/blob/add-playwright/e2e-tests/example.spec.js">e2e-tests/example.spec.js</a> = Test specification * <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/fearlessly-dev/recipe-me/blob/add-playwright/playwright.config.js">playwright.config.js</a> = Test configuration</p>
<p>Merging that branch into main triggers <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/fearlessly-dev/recipe-me/actions/runs/1919689804">the GitHub action</a> as anticipated, leading to the entire suite of tests being run in the cloud. The test run took <code>5m 40s</code> with the bulk of the time (~4m) used for installing Playwright and browsers. We can also see the <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/fearlessly-dev/recipe-me/suites/5498490318/artifacts/175855529">HTML Report Artifact</a> available for download and local viewing.</p>
<p>🎉 Time to celebrate! We have an <strong>end-to-end testing harness setup with continuous integration using GitHub Actions</strong> for our project. It’s time to start customizing the test script and configuration to be more aligned to your project needs. We don’t have time to dive into details, but let’s take a quick look at the two key files to know.</p>
<h3 id="inspect-the-configuration-file">5. Inspect the Configuration File</h3>
<p>The Playwright configuration file lets you specify <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/api/class-testoptions">test options</a> for running multiple test projects concurrently, and <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/api/class-testconfig">execution options</a> to control how those tests are executed by Playwright. The <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/fearlessly-dev/recipe-me/blob/add-playwright/playwright.config.js">playwright.config.js</a> file in the default setup looks something like this (cleaned up for clarity):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb5-1" title="1"><span class="co">// @ts-check</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="kw">const</span> <span class="op">{</span> devices <span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;@playwright/test&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-3" title="3"></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="co">/**</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="co"> * </span><span class="an">@see</span><span class="co"> https://playwright.dev/docs/test-configuration</span></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="co"> * </span><span class="an">@type</span><span class="co"> {import(&#39;</span><span class="an">@playwright/test&#39;).PlaywrightTestConfig}</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="co"> */</span></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="kw">const</span> config <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-9" title="9">  <span class="dt">testDir</span><span class="op">:</span> <span class="st">&#39;./e2e-tests&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-10" title="10">  <span class="dt">timeout</span><span class="op">:</span> <span class="dv">30</span> <span class="op">*</span> <span class="dv">1000</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-11" title="11">  <span class="dt">expect</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-12" title="12">    <span class="dt">timeout</span><span class="op">:</span> <span class="dv">5000</span></a>
<a class="sourceLine" id="cb5-13" title="13">  <span class="op">},</span></a>
<a class="sourceLine" id="cb5-14" title="14">  <span class="dt">forbidOnly</span><span class="op">:</span> <span class="op">!!</span><span class="va">process</span>.<span class="va">env</span>.<span class="at">CI</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-15" title="15">  <span class="dt">retries</span><span class="op">:</span> <span class="va">process</span>.<span class="va">env</span>.<span class="at">CI</span> <span class="op">?</span> <span class="dv">2</span> : <span class="dv">0</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-16" title="16">  <span class="dt">workers</span><span class="op">:</span> <span class="va">process</span>.<span class="va">env</span>.<span class="at">CI</span> <span class="op">?</span> <span class="dv">1</span> : <span class="kw">undefined</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-17" title="17">  <span class="dt">reporter</span><span class="op">:</span> <span class="st">&#39;html&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-18" title="18">  <span class="dt">use</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-19" title="19">    <span class="dt">actionTimeout</span><span class="op">:</span> <span class="dv">0</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-20" title="20">    <span class="dt">trace</span><span class="op">:</span> <span class="st">&#39;on-first-retry&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-21" title="21">  <span class="op">},</span></a>
<a class="sourceLine" id="cb5-22" title="22"></a>
<a class="sourceLine" id="cb5-23" title="23">  <span class="co">/* Configure projects for major browsers */</span></a>
<a class="sourceLine" id="cb5-24" title="24">  <span class="dt">projects</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb5-25" title="25">    <span class="op">{</span></a>
<a class="sourceLine" id="cb5-26" title="26">      <span class="dt">name</span><span class="op">:</span> <span class="st">&#39;chromium&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-27" title="27">      <span class="dt">use</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-28" title="28">        ...<span class="at">devices</span>[<span class="st">&#39;Desktop Chrome&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb5-29" title="29">      <span class="op">},</span></a>
<a class="sourceLine" id="cb5-30" title="30">    <span class="op">},</span></a>
<a class="sourceLine" id="cb5-31" title="31">    <span class="op">{</span></a>
<a class="sourceLine" id="cb5-32" title="32">      <span class="dt">name</span><span class="op">:</span> <span class="st">&#39;firefox&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-33" title="33">      <span class="dt">use</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-34" title="34">        ...<span class="at">devices</span>[<span class="st">&#39;Desktop Firefox&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb5-35" title="35">      <span class="op">},</span></a>
<a class="sourceLine" id="cb5-36" title="36">    <span class="op">},</span></a>
<a class="sourceLine" id="cb5-37" title="37">    <span class="op">{</span></a>
<a class="sourceLine" id="cb5-38" title="38">      <span class="dt">name</span><span class="op">:</span> <span class="st">&#39;webkit&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-39" title="39">      <span class="dt">use</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-40" title="40">        ...<span class="at">devices</span>[<span class="st">&#39;Desktop Safari&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb5-41" title="41">      <span class="op">},</span></a>
<a class="sourceLine" id="cb5-42" title="42">    <span class="op">},</span></a>
<a class="sourceLine" id="cb5-43" title="43"><span class="op">};</span></a>
<a class="sourceLine" id="cb5-44" title="44"></a>
<a class="sourceLine" id="cb5-45" title="45"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> config<span class="op">;</span></a></code></pre></div>
<p>Some observations:</p>
<ul>
<li>The <code>projects</code> property defines target browsers to run the test against</li>
<li>The <code>workers</code> property decides the degree of parallelization of the runs</li>
<li>The <code>reporter</code> property selects the type of report (HTML) generated for the run</li>
<li>The <code>trace</code> property requests that traces be recorded only on first retry</li>
</ul>
<p>We can now customize this in many ways. Some options to try: * Set <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/trace-viewer#recording-a-trace">trace</a> to <code>on</code> to trigger recording, then view the data with Trace Viewer. <a href="https://aka.ms/learn-PWA/30Days-3.6/dev.to/azure/004-tool-talk-hello-trace-viewer-2a61">Read this post</a> for more details. * Add <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/test-configuration#emulation">emulator targets</a> to <code>projects</code> - validate responsiveness of app experiences. * Set <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/test-configuration#automatic-screenshots">screenshot</a> to <code>on</code> - make Playwright Test capture screenshots after every test for analysis. * Set <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/test-configuration#record-video">video</a> to <code>on</code> - make Playwright Test record videos after every test for analysis.</p>
<p>Note: Every such action has a related cost and complexity. It’s good to experiment with various configuration options in your local test environment - then use the reports to iterate for efficiency in time and resource usage.</p>
<h3 id="inspect-the-test-script">6. Inspect the Test Script</h3>
<p>Start by looking at the quickstart guide’s <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/next/intro#first-test">first test</a> script to understand key aspects of the test specification. Here is what that looks like:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">const</span> <span class="op">{</span> test<span class="op">,</span> expect <span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;@playwright/test&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-2" title="2"></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="at">test</span>(<span class="st">&#39;basic test&#39;</span><span class="op">,</span> <span class="kw">async</span> (<span class="op">{</span> page <span class="op">}</span>) <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-4" title="4">  <span class="cf">await</span> <span class="va">page</span>.<span class="at">goto</span>(<span class="st">&#39;https://playwright.dev/&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-5" title="5">  <span class="kw">const</span> title <span class="op">=</span> <span class="va">page</span>.<span class="at">locator</span>(<span class="st">&#39;.navbar__inner .navbar__title&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-6" title="6">  <span class="cf">await</span> <span class="at">expect</span>(title).<span class="at">toHaveText</span>(<span class="st">&#39;Playwright&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-7" title="7"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>Some observations: * <code>page</code> is the most common <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/api/class-fixtures#fixtures-page">fixture</a> used in tests, creating an isolated context for running that test. * <code>page.locator</code> creates a <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/api/class-locator">Locator</a>, a view into page based on an associated selector. * <code>expect(..).toHaveText(..)</code> is an example of a web-first <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/test-assertions">Assertion</a> with convenience async matchers that enforce auto-waiting for reliable testing.</p>
<p>You can learn more about these and other core concepts like test hooks, browser contexts, and explore the Playwright API, by scanning the <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/intro#installation">documentation</a>. Now, look at the scaffolded <a href="https://aka.ms/learn-PWA/30Days-3.6/github.com/fearlessly-dev/recipe-me/blob/add-playwright/e2e-tests/example.spec.js">e2e-tests/example.spec.js</a> and see if you can get an understanding of how these concepts translate to more complex end-to-end testing specifications.</p>
<h3 id="next-steps">7. Next Steps</h3>
<p>The default scaffolded test provides a comprehensive end-to-end testing example for a typical “TODO” list application showcasing various features of the Playwright Test API. However, this may be overwhelming for a beginner. Instead, try these steps:</p>
<ul>
<li>Complete the <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/intro">Quickstart</a> - learn core concepts like <em>fixtures</em>, <em>hooks</em>, and <em>assertions</em>.</li>
<li>Get more familiar with the <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/cli">Command-Line Tools</a> - I have a <a href="https://aka.ms/learn-PWA/30Days-3.6/dev.to/azure/005-tool-talk-hello-command-line-faj">Tool Talk post</a> on the topic if useful.</li>
<li>Try using <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/codegen">Codegen</a> to author tests, and <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/inspector">Inspector</a> to debug execution.</li>
<li>Dive into the <a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev/docs/api/class-playwright">Playwright API</a> to start figuring out selectors and actions you can use in crafting your own test specifications.</li>
</ul>
<p>You can now go back into the scaffolded test specification file, delete the contents, and start writing your own test actions, test cases, and test suites! Test automation for the win!</p>
<h2 id="exercise">Exercise</h2>
<p>We covered a lot today. Now it’s your turn!</p>
<ul>
<li>Pick a PWA - for instance, a <a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/demo-pwas">sample PWA</a> - to experiment on.</li>
<li>Instrument it to setup your first end-to-end test with Playwright.</li>
<li>Validate setup locally by running tests and inspecting the reports.</li>
<li>Validate the GitHub Actions workflow by committing this to a GitHub repo.</li>
<li>Try out the next steps above - and start customizing your testing scripts!</li>
</ul>
<p>And set the stage for your end-to-end testing strategy with Playwright!</p>
<h2 id="resources">Resources</h2>
<ol type="1">
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/martinfowler.com/articles/practical-test-pyramid.html#TheImportanceOftestAutomation">The Practical Test Pyramid</a> - Martin Fowler, Feb 2018</li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing">Cross Browser Testing</a> - MDN Web Docs</li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/playwright.dev">Playwright Docs</a> - Reliable E2E Testing Framework for modern web apps</li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/devtools-protocol-chromium">MS Edge DevTools Protocol</a> - Instrument, inspect, debug &amp; profile browsers.</li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/playwright">MS Edge: Automate with Playwright</a> - run Microsoft Edge in headed mode, with Playwright</li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/docs.microsoft.com/en-us/microsoft-edge/origin-trials">Using Origin Trials in Microsoft Edge</a> - early testing with experimental APIs</li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/web.dev/pwa-checklist">PWA Checklist</a> - What makes a good PWA?</li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/medium.com/dev-channel/testing-service-workers-318d7b016b19">Testing Service Workers</a> - Chromium Dev Team, Mar 2017</li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.6/developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection">Implementing Feature Detection</a> - writing feature detection tests</li>
</ol>
<hr />]]></description>
    <pubDate>Fri, 4 Mar 2022 19:19:59 -0500</pubDate>
  </item>
   
  <item>
    <title><![CDATA[3.5: Auditing tools]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/05</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/05</guid>
    <description><![CDATA[<h1 id="auditing-tools">3.5: Auditing tools</h1>
<p><strong>Author: Justin Willis (Software Engineer on the PWABuilder team) <span class="citation" data-cites="justinwillis96">[@justinwillis96]</span>(https://twitter.com/Justinwillis96)</strong></p>
<p>Welcome to <strong>Week 3 Day 5</strong> of #30DaysOfPWA! Want to learn more about this project? Check out our <a href="../kickoff.md">Kickoff</a> post to get more details on the content roadmap and contributors. Now, let’s dive in!</p>
<figure>
<img src="_media/day-05.jpg" alt="image of title and author." /><figcaption>image of title and author.</figcaption>
</figure>
<h3 id="what-well-cover-today">WHAT WE’LL COVER TODAY</h3>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Section</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Why audit our PWA</strong></td>
<td>Why should you use these auditing tools?</td>
</tr>
<tr class="even">
<td><strong>Audit with PWABuilder</strong></td>
<td>PWABuilder can tell you if our PWA is installable and store ready</td>
</tr>
<tr class="odd">
<td><strong>Audit with Webhint</strong></td>
<td>Let’s use these two new tools to create a new PWA with just a few button clicks.</td>
</tr>
<tr class="even">
<td><strong>Audit performance with Lighthouse and Edge Devtools</strong></td>
<td>Deep dive into some of the tools used in PWA Studio and Starter</td>
</tr>
</tbody>
</table>
<hr />
<p>Hello! For today’s post on the 30 Days of PWA series, we will be learning how to audit a PWA and use those audits to help improve it’s user experience.</p>
<h2 id="why-audit-a-pwa">Why audit a PWA</h2>
<p>So, why should we audit our PWA anyways? And what does this even mean?</p>
<p>When we are talking about auditing our PWA, we mean using tools to ensure that our PWA is:</p>
<ul>
<li>Installable from the browser</li>
<li>Ready to submit to app stores such as the Microsoft Store</li>
<li>Accessible</li>
<li>Fast</li>
<li>Follows cross-browser development best practices</li>
</ul>
<p>We do this to ensure our PWA is the best it can be for users. Users want high quality apps that are accessible, fast and discoverable, and auditing ensures we are meeting these requirements.</p>
<p>Today we are going to use PWABuider, Webhint and Edge Devtools to audit our PWA, let’s dive in!</p>
<h2 id="audit-with-pwabuilder">Audit with PWABuilder</h2>
<p>Let’s start with PWABuilder. The focus of the audit PWABuilder does is to ensure our PWA is high-quality, installable, and ready to publish to app stores like the Microsoft Store. To do this, PWABuilder looks at the:</p>
<ul>
<li>Web Manifest</li>
<li>Service Worker</li>
<li>HTTPS Setup</li>
</ul>
<p>and audits them based on a set of requirements. These also happen to be the technical essentials you need for an app to be considered a PWA.</p>
<table>
<colgroup>
<col style="width: 24%" />
<col style="width: 37%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th>Web Manifest</th>
<th>Service Worker</th>
<th>Security</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Properly linked + registered</td>
<td>Properly linked + registered</td>
<td>Uses HTTPS</td>
</tr>
<tr class="even">
<td>Contains required fields for installation</td>
<td>Works Offline</td>
<td>Valid HTTPS Setup</td>
</tr>
<tr class="odd">
<td>Icons follow best practices</td>
<td>Suggested features to improve our offline experience</td>
<td>No HTTP content on page</td>
</tr>
<tr class="even">
<td>Suggested fields to improve our PWA or enable new features</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Each section above has a set of Required audits. These are audits that are required to be in the app stores and for installation from the browser. There are also Recommended and Optional audits for each section. These audit things such as, for example, manifest fields you can add to improve the installation experience of your PWA, but are not required.</p>
<p>To get started with PWABuilder’s audits, you can use either <a href="https://aka.ms/learn-PWA/30Days-3.5/pwabuilder.com">PWABuilder</a> or the <a href="https://aka.ms/learn-PWA/30Days-3.5/pwa-studio">PWA Studio VSCode Extension</a>.</p>
<h3 id="getting-audits-from-pwabuilder.com">Getting audits from pwabuilder.com</h3>
<p>Already have a published and live PWA that you want to audit?</p>
<ul>
<li>Grab our URL and head over to https://aka.ms/learn-PWA/30Days-3.5/pwabuilder.com</li>
<li>Enter the URL to our PWA on the homepage of pwabuilder.com and click Start <img src="_media/05/enter-url.png" alt="We have entered our URL into the input on the homepage of PWABuilder" /></li>
<li>pwabuilder.com will now analyze our PWA and return our audits <img src="_media/05/report-card.jpeg" alt="A screenshot of the report-card page in PWABuilder showing our audits" /></li>
</ul>
<p>Each section is given an overall score. If we click on that section, it will give us more details on our score, including what we can add or change to get a better score. Towards the bottom of the page, we can see our total score. <img src="_media/05/total-score.png" alt="A screenshot showing the total score located towards the bottom of the report page" /></p>
<p>If our total score is green, then our PWA is ready to publish and we are ready to click next to start packaging our PWA.</p>
<p>If our total score is yellow this means that our PWA is most likely ready to publish, but may be missing out on Recommended Features such as having a <code>background_color</code> in our Web Manifest. The section that is lowering our score will also have a yellow score. At that point, we should click on it to see what we need to add.</p>
<p>If our score is red, this means our PWA is not ready to publish to the web or app stores and needs additional work. The section with the problem will also have a red score. As above, we can click on that section to see what needs to be added next.</p>
<h3 id="getting-our-audits-with-pwa-studio">Getting our audits with PWA Studio</h3>
<p>PWA Studio enables us to audit with PWABuilder during development, not just after our PWA has gone live.</p>
<ul>
<li>Install PWA Studio from the <a href="https://aka.ms/learn-PWA/30Days-3.5/pwa-studio">VSCode Marketplace</a></li>
<li>Open our codebase in VSCode</li>
<li>Click the PWABuilder icon on the left side of VSCode <img src="_media/05/icon-on-left.png" alt="The PWABuilder icon on the left side of VSCode" /></li>
<li>We will now see our audits</li>
</ul>
<figure>
<img src="_media/05/pwa-studio.png" alt="The audits panels in PWA Studio" /><figcaption>The audits panels in PWA Studio</figcaption>
</figure>
<p>PWA Studio uses a simpler way of showing audits. As it shows in the above screenshot, there are three sections again, but slightly different this time: Web Manifest, Service Worker, Store Ready.</p>
<p>For each section, you will see a list of items. If that item is good to go, it will have a checkmark next to it, if not, it will have a caution symbol. For every item, you can click on the info icon in that item to learn more about it and how to fix the audit.</p>
<p>For the best PWA, we recommend checking off as many items as you can. If you are missing something that is required, PWA Studio will give you an alert when trying to publish to the web or package your PWA for the app stores.</p>
<h2 id="audit-a-pwa-with-webhint">Audit a PWA with Webhint</h2>
<p>You may have heard of <a href="https://aka.ms/learn-PWA/30Days-3.5/webhint.io">Webhint</a> before, but did you know it’s audits are built into the <a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/issues">Issues panel in Edge devtools?</a></p>
<p>The Issues panel allows you to quickly see any of the issues webhint detected in our app. On top of this, it also tells you which HTML element the problem affects and how to fix it.</p>
<p><img src="_media/05/webhint.png" alt="The issues panel in Edge devtools showing an accessibility issue" />.</p>
<p>To use it: - Open our app in Edge - Open <a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium">Edge devtools</a> - Select the Issues tab. The Issues panel opens with issues grouped into different categories. - Refresh our app, because some issues are reported based on network requests. Notice the updated count in the Issues counter.</p>
<h2 id="audit-performance-with-lighthouse-and-devtools">Audit performance with Lighthouse and Devtools</h2>
<p>We are now ready to audit our app’s loading performance, or how fast our PWA loads on different devices with varying network connections.</p>
<p><strong>Note</strong> Edge devtools can also help you evaluate and improve our apps runtime performance. Check our <a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/evaluate-performance">docs</a> to learn more.</p>
<p>Edge devtools has the <a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/speed/get-started">Lighhouse</a> tool built in. Lighthouse can quickly evaluate our apps loading performance and give us suggestions on how to make it load faster. It will evaluate our app running on our device, but with CPU throttling and Network throttling to better match what you users experience. When talking about loading performance, it is important to remember that we need to ensure our apps load fast on our users devices, not just our development machines. Lighthouse enables us to do this directly from our development device.</p>
<p>To get started auditing our loading performance with Lighthouse:</p>
<ul>
<li>Open our app in Edge</li>
<li>Open <a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium">Edge devtools</a></li>
<li>Open the Lighthouse tab in devtools</li>
</ul>
<figure>
<img src="_media/05/lighthouse.png" alt="A screenshot of the lighthouse tab at the top of devtools" /><figcaption>A screenshot of the lighthouse tab at the top of devtools</figcaption>
</figure>
<ul>
<li>Click <code>Generate Report</code> to get a baseline report</li>
<li>Analyze the report and make the suggested changes to our app.</li>
</ul>
<p>For a full walkthrough on using Lighthouse to improve the loading performance of our application, check our <a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/speed/get-started">docs</a>.</p>
<p>Using these tools, we can quickly make changes to our PWA to ensure it provides the best experience possible for our users. And, because PWAs are instantly updateable like normal websites, we can get these changes out to our users quickly!</p>
<p>In our next post, we’ll dive into converting our existing website to a PWA!</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://aka.ms/learn-PWA/30Days-3.5/pwabuilder.com">pwabuilder.com</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.5/pwa-studio">PWA Studio VSCode Extension</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium">Edge devtools</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/evaluate-performance">Evaluate Runtime Performance</a></li>
<li><a href="https://aka.ms/learn-PWA/30Days-3.5/docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/speed/get-started">Evaluate Loading Performance</a></li>
</ul>]]></description>
    <pubDate>Thu, 3 Mar 2022 16:05:19 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[3.4: Debugging tools #2]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/04</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/04</guid>
    <description><![CDATA[<h1 id="debugging-tools-2">3.4: Debugging tools #2</h1>
<p><strong>Author: Chait Pinnamaneni <span class="citation" data-cites="noobtiger11">[@noobtiger11]</span>(https://twitter.com/noobtiger11)</strong></p>
<p>Welcome to <strong>Week 3 Day 4</strong> of #30DaysOfPWA! Want to learn more about this project? Check out our <a href="../kickoff.md">Kickoff</a> post to get more details on the content roadmap and contributors. Now, let’s dive in!</p>
<figure>
<img src="_media/day-04.jpg" alt="Welcome to week 3 day 4 - Debugging tools part 2." /><figcaption>Welcome to week 3 day 4 - Debugging tools part 2.</figcaption>
</figure>
<p>Welcome to the second day of debugging PWA using browser DevTools!</p>
<p>Yesterday, you learned to debug common issues related to PWA using DevTools. However as you learned in <a href="../advanced-capabilities/">week 2</a> of this series, PWAs are capable of more advanced features like <a href="../advanced-capabilities/06.md">background synchronization</a>, <a href="../advanced-capabilities/07.md">push notifications</a>, and more.</p>
<p>Today we will go through the tools available to you for debugging these advanced features of PWAs.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: left;">What you will learn today</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><em>PWA permissions</em></td>
<td style="text-align: left;">How to check for PWA permissions</td>
</tr>
<tr class="even">
<td style="text-align: left;"><em>Manage notifications</em></td>
<td style="text-align: left;">How to emulate push notifications</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><em>Background sync and fetch</em></td>
<td style="text-align: left;">How to view background sync and fetch events</td>
</tr>
<tr class="even">
<td style="text-align: left;"><em>IndexedDB storage</em></td>
<td style="text-align: left;">How to view and manage your data stored in IndexedDB</td>
</tr>
</tbody>
</table>
<hr />
<p>Please note that all of the screenshots in today’s article are taken from Microsoft Edge DevTools, but other browsers offer similar tools.</p>
<h2 id="managing-pwa-permissions">Managing PWA permissions</h2>
<p>PWAs can make full use of modern web features such as notifications, location, and storage, however, for PWAs to use these features, they must be granted permission.</p>
<p>For example, to send notifications to the user, a PWA has to request permission via the <a href="https://aka.ms/learn-PWA/30Days-3.4/developer.mozilla.org/docs/Web/API/Notifications_API">Notifications API</a>, which looks something like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb1-1" title="1"><span class="va">Notification</span>.<span class="at">requestPermission</span>().<span class="at">then</span>(<span class="kw">function</span>(result) <span class="op">{</span></a>
<a class="sourceLine" id="cb1-2" title="2">  <span class="va">console</span>.<span class="at">log</span>(result)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>This will prompt browsers to show a dialog requesting users for the permission as shown below.</p>
<figure>
<img src="_media/day-04-permission-dialog.png" alt="The permissions dialog in Microsoft Edge prompting the user to allow or deny notifications from a site." /><figcaption>The permissions dialog in Microsoft Edge prompting the user to allow or deny notifications from a site.</figcaption>
</figure>
<p>During development, you often need to test different user flows based on whether the user has granted or denied certain permissions. This can be achieved by using the <strong>App permissions</strong> list. With this list, you can validate and manage all the permissions that your app uses.</p>
<p>For example, to reset notifications permission:</p>
<ul>
<li>Open the <strong>App permissions</strong> page by clicking the <strong>View site information</strong> icon in the url bar or the <strong>Settings and more</strong> menu button in an installed PWA’s title bar.</li>
<li>Find <strong>Notifications</strong> in the list and reset it back to its default value.</li>
<li>Alternatively you can also reset all permissions by clicking <strong>Reset permissions</strong>.</li>
</ul>
<figure>
<img src="_media/day-04-all-permission.png" alt="Steps to open App permissions list and reset notification permission in Microsoft Edge." /><figcaption>Steps to open App permissions list and reset notification permission in Microsoft Edge.</figcaption>
</figure>
<h2 id="push-notifications">Push notifications</h2>
<p>As you learned in <a href="../advanced-capabilities/07.md">Notifying Your Users of Updates</a>, PWAs can improve engagement by sending push notifications to the user. This is achieved through the <a href="https://aka.ms/learn-PWA/30Days-3.4/developer.mozilla.org/docs/Web/API/Push_API">Push API</a> and the <a href="https://aka.ms/learn-PWA/30Days-3.4/developer.mozilla.org/docs/Web/API/Notifications_API">Notifications API</a>, both of which are accessible to service workers.</p>
<p>PWAs can subscribe to push messages from the server via the Push API. Once subscribed, a PWA will start receiving push events even if the application is closed. When a push event is received, the PWA can send a notification to the user via the Notifications API.</p>
<p>DevTools can track all these events for you, which can help you debug the entire user notification flow. To see the list of all the push messages and notifications in DevTools:</p>
<ul>
<li>Open DevTools.</li>
<li>Open the <strong>Application</strong> tool.</li>
<li>Open <strong>Push messaging</strong> under the <strong>Background services</strong> section.</li>
<li>Click <strong>Start recording events</strong> to start listing push notification events in the table.</li>
<li>For notifications, open <strong>Notifications</strong> under the <strong>Background services</strong> section and click <strong>Start recording events</strong>.</li>
<li>Click on any notification to view the details.</li>
</ul>
<figure>
<img src="_media/day-04-notifications-table.png" alt="Steps to view Push messages and notifications list in Microsoft Edge DevTools." /><figcaption>Steps to view Push messages and notifications list in Microsoft Edge DevTools.</figcaption>
</figure>
<p>Since the push events have to be triggered by the server, to test and debug push messaging flow in a PWA, you often have to send mock events from the server.</p>
<p>DevTools provides a convenient way to avoid this by simulating sending push events directly from the browser. To send mock push events in a PWA:</p>
<ul>
<li>Open DevTools and open the <strong>Application</strong> tool.</li>
<li>Open <strong>Service Workers</strong> in the <strong>Application</strong> section.</li>
<li>Type your test message in the <strong>Push</strong> input field.</li>
<li>Click the <strong>Push</strong> button to send the message.</li>
<li>You can then validate that the event was sent in the <strong>Push messaging</strong> table as described above.</li>
</ul>
<figure>
<img src="_media/day-04-push-messages-mock.png" alt="Mock push messages in Microsoft Edge DevTools." /><figcaption>Mock push messages in Microsoft Edge DevTools.</figcaption>
</figure>
<h2 id="background-syncfetch">Background sync/fetch</h2>
<p>PWAs can also use the <a href="https://aka.ms/learn-PWA/30Days-3.4/developer.mozilla.org/en-US/docs/Web/API/Background_Synchronization_API">Background Sync API</a>, <a href="https://aka.ms/learn-PWA/30Days-3.4/developer.mozilla.org/docs/Web/API/Background_Fetch_API">Background Fetch API</a>, and <a href="https://aka.ms/learn-PWA/30Days-3.4/developer.mozilla.org/docs/Web/API/Web_Periodic_Background_Synchronization_API">Periodic Background Sync API</a> to send and receive network requests and messages.</p>
<p>The advantage of using these background APIs over Fetch or XMLHttpRequest is that network requests made through these APIs can be deferred until the PWA has active network connectivity and be done even when the PWA is not being used. Check out <a href="../advanced-capabilities/06.md">Synchronizing app data in the background</a> for more information.</p>
<p>Similar to how you can view push messages and notifications, Background API events can also be viewed in DevTools. The <strong>Background services</strong> section of the <strong>Application</strong> tool has 3 sub-sections:</p>
<ul>
<li><strong>Background Fetch</strong> can record the background fetch events.</li>
<li><strong>Background Sync</strong> can record background sync events.</li>
<li><strong>Periodic Background Sync</strong> can record periodic background sync events.</li>
</ul>
<p>You can also send test background sync events and periodic background sync events in the <strong>Service Workers</strong> section, which works like when sending test push messages as explained previously.</p>
<p>These mock events trigger all the event handlers in PWA and also gets listed in the corresponding background services table.</p>
<figure>
<img src="_media/day-04-background-services.png" alt="Background sync in Microsoft Edge DevTools." /><figcaption>Background sync in Microsoft Edge DevTools.</figcaption>
</figure>
<h2 id="indexeddb-storage">IndexedDB storage</h2>
<p>To provide offline support, PWAs should be able to store data locally. There are multiple storage options for the web and you can read more about them <a href="../core-concepts/05.md">here</a>.</p>
<p>In PWAs, a recommended practice is to use <a href="../advanced-capabilities/05.md">Cache storage</a> for storing static resources and <a href="https://aka.ms/learn-PWA/30Days-3.4/developer.mozilla.org/docs/Web/API/IndexedDB_API">IndexedDB</a> is used for more structured data. You can learn more about IndexedDB in the upcoming <a href="../platforms-practices/04.md">Best Practices for Reliability</a> article.```</p>
<p><a href="./03.md">Yesterday</a>, you learned about debugging cache issues in DevTools. To view and manage your app’s IndexedDB data in DevTools:</p>
<ul>
<li>Open DevTools</li>
<li>Open the <strong>Application</strong> tool.</li>
<li>Under <strong>Storage</strong>, expand the <strong>IndexedDB</strong> section until you find your database and the table you want to open. Note that there can be multiple databases here.</li>
<li>Your table appears in the main area of the tool, and you can view the data.</li>
<li>The toolbar displayed at the top of the table can be used to clear the entire table or delete the selected row.</li>
</ul>
<figure>
<img src="_media/day-04-indexeddb.png" alt="Steps to view indexedDB data in DevTools." /><figcaption>Steps to view indexedDB data in DevTools.</figcaption>
</figure>
<h2 id="summary">Summary</h2>
<p>After reading yesterday’s and today’s articles in this series, you should have a pretty good understating of how the browser DevTools can be used for PWA development and debugging. A lot of PWA issues can be resolved with DevTools and development can be made easy by using the specialized tools we went over in the past two days.</p>
<p>The feature set available to PWAs is always growing and the DevTools is planning to add tooling support for these new features as well. If you have any feature requests or feedback, you can contact the Microsoft Edge DevTools team by clicking the <strong>Send Feedback</strong> button in upper right corner of DevTools.</p>]]></description>
    <pubDate>Thu, 3 Mar 2022 01:01:03 +0100</pubDate>
  </item>
   
  <item>
    <title><![CDATA[-]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/_sidebar</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/_sidebar</guid>
    <description><![CDATA[<ul>
<li><a href="/30DaysOfPWA/kickoff"><strong>0. Kickoff</strong></a></li>
<li><a href="/30DaysOfPWA/core-concepts/"><strong>1. Core Concepts</strong></a>
<ul>
<li><a href="/30DaysOfPWA/core-concepts/01.md">1.1 Introducing PWA.</a></li>
<li><a href="/30DaysOfPWA/core-concepts/02.md">1.2 Deconstructing PWA.</a></li>
<li><a href="/30DaysOfPWA/core-concepts/03.md">1.3 Make PWA installable.</a></li>
<li><a href="/30DaysOfPWA/core-concepts/04.md">1.4 Make PWA reliable.</a></li>
<li><a href="/30DaysOfPWA/core-concepts/05.md">1.5 Make PWA work offline.</a></li>
<li><a href="/30DaysOfPWA/core-concepts/06.md">1.6 Make PWA capable.</a></li>
<li><a href="/30DaysOfPWA/core-concepts/07.md">1.7 Developing PWA.</a></li>
</ul></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/"><strong>2. Advanced Capabilities</strong></a>
<ul>
<li><a href="/30DaysOfPWA/advanced-capabilities/01.md">2.1 Introducting the advanced capabilities of Progressive Web Apps</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/02.md">2.2 Creating application shortcuts</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/03.md">2.3 Sharing content from and with your app</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/04.md">2.4 Displaying content more like an app</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/05.md">2.5 Caching your app data</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/06.md">2.6 Synchronizing app data in the background</a></li>
<li><a href="/30DaysOfPWA/advanced-capabilities/07.md">2.7 Notifying your users of updates</a></li>
</ul></li>
<li><a href="/30DaysOfPWA/dev-tools/"><strong>3. Developer Tools</strong></a>
<ul>
<li><a href="/30DaysOfPWA/dev-tools/01.md">3.1 Get-started tools - Part 1</a></li>
<li><a href="/30DaysOfPWA/dev-tools/02.md">3.2 Get-started tools - Part 2</a></li>
<li><a href="/30DaysOfPWA/dev-tools/03.md">3.3 Debugging tools - Part 1</a></li>
<li><a href="/30DaysOfPWA/dev-tools/04.md">3.4 Debugging tools - Part 2</a></li>
<li><a href="/30DaysOfPWA/dev-tools/05.md">3.5 Auditing tools</a></li>
<li><a href="/30DaysOfPWA/dev-tools/06.md">3.6 Test automation tools</a></li>
<li><a href="/30DaysOfPWA/dev-tools/07.md">3.7 Packaging tools</a></li>
</ul></li>
<li><a href="/30DaysOfPWA/platforms-practices/"><strong>4. Platforms &amp; Practices</strong></a>
<ul>
<li><a href="/30DaysOfPWA/platforms-practices/01.md">4.1 Installability for PWAs</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/02.md">4.2 Best practices for PWA engagement</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/03.md">4.3 Distributing your PWA</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/04.md">4.4 Best practices for PWA reliability</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/05.md">4.5 PWA maintainability - Using web components</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/06.md">4.6 Best practices for PWA authentication</a></li>
<li><a href="/30DaysOfPWA/platforms-practices/07.md">4.7 Best practices for PWA UI/UX</a></li>
</ul></li>
<li><h2 id="summary"><a href="/30DaysOfPWA/summary"><strong>5. Summary</strong></a></h2></li>
<li><a href="https://aka.ms/learn-pwa/30Days-ghd">💬 Join the discussion on Github</a></li>
<li><a href="https://aka.ms/learn-pwa/30Days-survey">🗣 Help us grow with your feedback</a></li>
</ul>]]></description>
    <pubDate>Wed, 2 Mar 2022 14:53:43 -0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[3.3: Debugging tools #1]]></title>
    <link>https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/03</link>
    <guid isPermaLink="false">https://aka.ms/learn-PWA/30Days-blog/#/30DaysOfPWA/dev-tools/03</guid>
    <description><![CDATA[<h1 id="debugging-tools-1">3.3: Debugging tools #1</h1>
<p><strong>Author: Patrick Brosset <span class="citation" data-cites="patrickbrosset">[@patrickbrosset]</span>(https://twitter.com/patrickbrosset)</strong></p>
<p>Welcome to <strong>Week 3 Day 3</strong> of #30DaysOfPWA! Want to learn more about this project? Check out our <a href="../kickoff.md">Kickoff</a> post to get more details on the content roadmap and contributors. Now, let’s dive in!</p>
<figure>
<img src="_media/day-03.jpg" alt="image of title and author." /><figcaption>image of title and author.</figcaption>
</figure>
<h3 id="what-well-cover-today">WHAT WE’LL COVER TODAY</h3>
<table>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Section</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Testing on other devices</strong></td>
<td>How to simulate your app being rendered on a mobile device during development?</td>
</tr>
<tr class="even">
<td><strong>Troubleshooting installation issues</strong></td>
<td>How to detect issues preventing your app from installing and resolve them?</td>
</tr>
<tr class="odd">
<td><strong>Reloading manifest changes</strong></td>
<td>How to make sure your manifest changes are reloaded?</td>
</tr>
<tr class="even">
<td><strong>Troubleshooting server worker issues</strong></td>
<td>How to check if your service worker is running, force update it, and debug it?</td>
</tr>
<tr class="odd">
<td><strong>Troubleshooting cache issues</strong></td>
<td>How to view and manage your cached resources?</td>
</tr>
<tr class="even">
<td><strong>Testing offline support</strong></td>
<td>How to simulate offline mode?</td>
</tr>
</tbody>
</table>
<hr />
<p>As you start creating your PWA and making use of service workers, storage, and other features, you may start running into bugs. Thankfully, web browsers come with powerful built-in tools you can use to inspect your application’s code and debug it.</p>
<p>On top of accessing HTML and CSS, editing it live in the browser, finding JavaScript errors or debugging them, browser developer tools (or just DevTools) also come with tools specifically made for PWAs.</p>
<h2 id="overview">Overview</h2>
<p>Today, we’ll cover some of the most useful tools when working on Progressive Web Apps code. In this article we’ll take a look at how to simulate different devices, troubleshoot installability and caching issues, as well as test offline scenarios.</p>
<p>Although we’ll be using Microsoft Edge to demo the tools, other browsers have very similar tools.</p>
<h2 id="testing-on-other-devices">Testing on other devices</h2>
<p>Nothing replaces testing on real devices. So once your app is getting ready and runs on a web server, it’s great if you can check it on other computers and mobile devices.</p>
<p>It’s not always possible though and DevTools comes with a very useful <strong>Device Emulation</strong> tool you can use to check what your app would look and feel like on other devices.</p>
<p>To start <strong>Device Emulation</strong>:</p>
<ul>
<li>Open DevTools by pressing <code>F12</code> or right-clicking the page and selecting <code>Inspect</code>.</li>
<li>Click the <strong>Toggle device emulation</strong> button in the top-left corner of DevTools.</li>
</ul>
<figure>
<img src="_media/device-mode.png" alt="Screenshot of a tab in Microsoft Edge with DevTools open and the device emulation tool started, making the page appear as if rendered on a mobile device" /><figcaption>Screenshot of a tab in Microsoft Edge with DevTools open and the device emulation tool started, making the page appear as if rendered on a mobile device</figcaption>
</figure>
<p>Choose the devices you want to emulate in the <strong>Dimensions</strong> drop-down menu. When you do, the viewport resizes to match the emulated device’s screen, and your cursor acts like a touch input if the emulated device supports it. If you want, you can also click <strong>Edit</strong> in the menu and create your own devices.</p>
<p>Note that <strong>Device Emulation</strong> only works when your app is running in a browser tab. If it is running separately from the browser (e.g. when using <a href="01.md">PWA Starter</a>, or when installed and running as a separate window), then the <strong>Toggle device emulation</strong> button won’t be available in DevTools.</p>
<p>Learn more about the <a href="https://aka.ms/learn-PWA/device-emulation"><strong>Device Emulation</strong> tool here</a>.</p>
<h2 id="making-sure-the-app-is-installable">Making sure the app is installable</h2>
<p>During week 1, we saw the 3 building blocks of a PWA: using <a href="../core-concepts/04.md">HTTPS</a>, a <a href="../core-concepts/05.md">Service Worker</a>, and a <a href="../core-concepts/06.md">Web App Manifest</a>.</p>
<p>Web browsers will check that all 3 are available before making a web app installable. But they also run a few more checks on the content of the worker and manifest before letting a user install the app.</p>
<p>There may be times when the web browser thinks your app isn’t ready to be installed, and it is not always straightforward to know why. To debug this problem, you can review the installability information in the <strong>Application</strong> tool.</p>
<p>To review this information:</p>
<ul>
<li>Open DevTools.</li>
<li>Open the <strong>Application</strong> tool by clicking the <code>+</code> sign in the toolbar and finding the tool name in the list.</li>
<li>Once in the tool, go to the <strong>Manifest</strong> tab in the left sidebar.</li>
</ul>
<p>You may see a number of warnings that prevent your application from being installable.</p>
<figure>
<img src="_media/installability-warnings.png" alt="Screenshot of the Application tool in Microsoft Edge DevTools, showing the Manifest tab with many installability warnings" /><figcaption>Screenshot of the Application tool in Microsoft Edge DevTools, showing the Manifest tab with many installability warnings</figcaption>
</figure>
<p>Review and address these warnings, and reload the page. Once the warnings are gone, the web browser should display the app installation button in the address bar, which in Microsoft Edge, looks like this:</p>
<figure>
<img src="_media/app-available-icon.png" alt="Screenshot of the App Available button in Microsoft Edge DevTools" /><figcaption>Screenshot of the App Available button in Microsoft Edge DevTools</figcaption>
</figure>
<p>Learn more about using the <a href="https://aka.ms/learn-PWA/debug-PWA"><strong>Application</strong> tool to review your Web App Manifest</a>.</p>
<h2 id="reloading-manifest-changes">Reloading manifest changes</h2>
<p>While we’re on the topic of fixing manifest issues, there will be times when you make manifest changes and want to test the app again.</p>
<p>Because the manifest file is read upon installation, the only way for the OS to know about the change is by installing the app again. So, in order to reload your manifest changes:</p>
<ol type="1">
<li>Un-install the app:
<ul>
<li>On a mobile device, PWAs can be un-installed like any other apps.</li>
<li>On desktop computers, using Microsoft Edge, or Chrome, go to the special <code>about:apps</code> page to un-install any app.</li>
</ul></li>
<li>Go to the app again with your web browser, and make sure the new manifest is loaded.
<ul>
<li>You may need to force a hard-reload: open DevTools, then right-click on the page refresh icon in the browser toolbar and choose <strong>Empty cache and hard refresh</strong>.</li>
</ul></li>
<li>Install the app again.</li>
</ol>
<h2 id="checking-if-your-service-worker-is-running">Checking if your service worker is running</h2>
<p>Once registered, a service worker has its own lifecycle, independent from the one of the web page that registered it. It can get started and stopped, as well as updated by the browser outside of your control. As a developer, it’s important to know what state a service worker is currently in, and here DevTools can help again.</p>
<p>To find information about your PWA service worker:</p>
<ul>
<li>Open DevTools.</li>
<li>Open the <strong>Application</strong> tool by clicking the <code>+</code> sign in the toolbar and finding the tool name in the list.</li>
<li>Once in the tool, go to the <strong>Service Workers</strong> tab in the left sidebar.</li>
</ul>
<p>From there a few different pieces of information are provided including the name of the service worker file (which you can click to open it) and its status. This tool makes it easy to see whether the worker is running but can also be used to stop the service worker and, more usefully, update it. If you made a change to the code of your service worker and want to test it right away, click the <strong>Update</strong> link to do it.</p>
<figure>
<img src="_media/service-worker-status.png" alt="Screenshot of the Application tool in Microsoft Edge DevTools, showing the Service Workers panel, with the status of the worker, and the Update button" /><figcaption>Screenshot of the Application tool in Microsoft Edge DevTools, showing the Service Workers panel, with the status of the worker, and the Update button</figcaption>
</figure>
<p>If you want to debug the JavaScript code in your worker, click its <strong>Source</strong> file name in the tool. This will automatically open the file in the <strong>Sources</strong> tool. You can always go back to the <strong>Application</strong> tool by using the tab bar at the top, but the <strong>Sources</strong> tool is very handy for when you need to investigate JavaScript problems that require checking what the code does step by step.</p>
<ul>
<li>Click in the line number gutter, next to where you suspect the bug might be. This will add a breakpoint on that line. The next time this line runs, the JavaScript debugger will pause there.</li>
<li>Now use the app so that this line of code is execute. For example, if you added the breakpoint in your <code>fetch</code> handler, use the app so that a network request is made.</li>
<li>The debugger now pauses on that line, making it possible to review the values of all the accessible variables, as well as continue the execution step by step.</li>
</ul>
<figure>
<img src="_media/service-worker-debug.png" alt="Screenshot of the Sources tool in Microsoft Edge DevTools, showing the debugger paused in the service worker file" /><figcaption>Screenshot of the Sources tool in Microsoft Edge DevTools, showing the debugger paused in the service worker file</figcaption>
</figure>
<p>Learn more about using the <a href="https://aka.ms/learn-PWA/sources-tool"><strong>Sources</strong> tool to debug JavaScript code</a>.</p>
<h2 id="troubleshooting-cache-issues">Troubleshooting cache issues</h2>
<p>A lot of your service worker code likely revolves around accessing the cache, either reading from it or writing to it. There will come a time when you need to debug cache issues. Here the <strong>Sources</strong> tool will be useful to debug your code step by step, but it’s also very important to be able to see what’s in the cache already.</p>
<p>DevTools comes with a way to visualize the cache for your PWA.</p>
<ul>
<li>Open DevTools.</li>
<li>Open the <strong>Application</strong> tool by clicking the <code>+</code> sign in the toolbar and finding the tool name in the list.</li>
<li>Once in the tool, expand the <strong>Cache Storage</strong> section in the left sidebar.</li>
<li>Find your cache (it will be displayed in the expanded section with the name you chose in your service worker code) and click on it.</li>
</ul>
<p>This tool will display all of the cached resources in a table. The table is very handy, it lets you search through the list, sort by various columns, preview the content of a resource, etc.</p>
<figure>
<img src="_media/cache-storage.png" alt="Screenshot of the Application tool in Microsoft Edge DevTools, showing the Cache Storage section, with a table filled with cached resources" /><figcaption>Screenshot of the Application tool in Microsoft Edge DevTools, showing the Cache Storage section, with a table filled with cached resources</figcaption>
</figure>
<p>One of the most useful thing you can do in this tool is delete entries from the cache. This way you can make changes to your caching code, and test again, as if the resource had not been cached before. To delete a cached resource:</p>
<ul>
<li>Select it by clicking on it in the <strong>Cache Storage</strong> table.</li>
<li>Click the <strong>Delete Selected</strong> button in the table toolbar.</li>
</ul>
<p>Learn more about using the <a href="https://aka.ms/learn-PWA/cache-storage"><strong>Cache Storage</strong> tool</a>.</p>
<h2 id="testing-offline-support">Testing offline support</h2>
<p>Making your PWA work even when there is no network connection is key to a true app-like user experience, but it’s almost certain that when coding, you do have access to the network. So how do you test the offline scenario?</p>
<p>Again, DevTools comes to the rescue!</p>
<ul>
<li>Open DevTools.</li>
<li>Open the <strong>Application</strong> tool by clicking the <code>+</code> sign in the toolbar and finding the tool name in the list.</li>
<li>Once in the tool, go to the <strong>Service Workers</strong> tab in the left sidebar.</li>
<li>Select the <strong>Offline</strong> checkbox at the top of the tool.</li>
</ul>
<p>Once done, the browser will act as if you’re not connected to the internet and you can use the app to see how it behaves. For example, you could try to refresh (by pressing <code>F5</code> or <code>ctrl+R</code>/<code>cmd+R</code>) and see if the app loads at all.</p>
<figure>
<img src="_media/offline-mode.png" alt="Screenshot of the Application tool in Microsoft Edge DevTools, showing the Service Workers section and the Offline checkbox" /><figcaption>Screenshot of the Application tool in Microsoft Edge DevTools, showing the Service Workers section and the Offline checkbox</figcaption>
</figure>
<h2 id="summary">Summary</h2>
<p>As we’ve seen today, DevTools is a true Swiss-army knife when it comes to debugging PWA issues. There’s a tool for almost any scenario you might be having problems with. You can emulate mobile devices, check manifest errors, verify the state of your service worker and debug it, look at what’s been cached, and even test your app’s offline support!</p>
<p>No one writes perfect code in one go, and with developer tools like these browser DevTools, you don’t have to. You can feel comfortable experimenting and trying things out, and as soon as something seems wrong, just hit <code>F12</code> to get debugging information about the problem.</p>]]></description>
    <pubDate>Tue, 1 Mar 2022 16:44:13 -0800</pubDate>
  </item>
  
</channel>
</rss>
